{"version":3,"file":"index.js","sources":["../../../../../../../../../../../../../../program/Javascript/projects/TyphonJS/typhonjs-svelte/runtime-base/_dist/data/format/msgpack/compress/index.js"],"sourcesContent":["import { unpack, pack } from '@typhonjs-svelte/runtime-base/data/format/msgpack';\nimport { inflateSync, deflateSync } from '@typhonjs-svelte/runtime-base/data/compress';\nimport { toUint8Array, fromUint8Array } from '@typhonjs-svelte/runtime-base/data/format/base64';\n\n/**\r\n * Inflates given data then unpacks with MessagePack. This function is the inverse of `packAndDeflate`.\r\n *\r\n * @param {Uint8Array}  data - Any data.\r\n *\r\n * @param {object}   [opts] - Optional parameters.\r\n *\r\n * @param {import('#runtime/data/compress').InflateOptions} [opts.inflateOptions] - Inflate options.\r\n *\r\n * @returns {any} Inflated and unpacked data.\r\n */\r\nfunction inflateAndUnpack(data, { inflateOptions } = {})\r\n{\r\n   return unpack(inflateSync(data, inflateOptions));\r\n}\n\n/**\r\n * Converts Base64 string to Uint8Array / inflates then unpacks with MessagePack. This function is the inverse of\r\n * `packAndDeflateB64`.\r\n *\r\n * @param {string}  data - Any Base64 data that has been compressed with\r\n *\r\n * @param {object}   [opts] - Optional parameters.\r\n *\r\n * @param {import('#runtime/data/compress').InflateOptions} [opts.inflateOptions] - Inflate options.\r\n *\r\n * @returns {any} Inflated and unpacked data.\r\n */\r\nfunction inflateAndUnpackB64(data, { inflateOptions } = {})\r\n{\r\n   return unpack(inflateSync(toUint8Array(data), inflateOptions));\r\n}\n\n/**\r\n * Packs given data with MessagePack then deflates / compresses with Zlib. The inverse function to inflate is\r\n * `inflateAndUnpack`.\r\n *\r\n * @param {any}   data - Any data.\r\n *\r\n * @param {object}   [opts] - Optional parameters.\r\n *\r\n * @param {import('#runtime/data/compress').DeflateOptions} [opts.deflateOptions] - Deflate options.\r\n *\r\n * @returns {Uint8Array} Packed and compressed data.\r\n */\r\nfunction packAndDeflate(data, { deflateOptions } = {})\r\n{\r\n   return deflateSync(pack(data), deflateOptions);\r\n}\n\n/**\r\n * Packs given data with MessagePack then deflates / compresses with Zlib then converts the Uint8Array to a Base64\r\n * string. The inverse function to inflate is `inflateAndUnpackB64`.\r\n *\r\n * @param {any}   data - Any data.\r\n *\r\n * @param {object}   [opts] - Optional parameters.\r\n *\r\n * @param {import('#runtime/data/compress').DeflateOptions} [opts.deflateOptions] - Deflate options.\r\n *\r\n * @param {boolean}  [opts.urlsafe] - Base64 string is URL-and-filename-safe a la `RFC4648 ยง5`.\r\n *\r\n * @returns {string} Packed / compressed / Base64 string.\r\n */\r\nfunction packAndDeflateB64(data, { deflateOptions, urlsafe } = {})\r\n{\r\n   return fromUint8Array(deflateSync(pack(data), deflateOptions), urlsafe);\r\n}\n\nexport { inflateAndUnpack, inflateAndUnpackB64, packAndDeflate, packAndDeflateB64 };\n//# sourceMappingURL=index.js.map\n"],"names":[],"mappings":";;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,gBAAgB,CAAC,IAAI,EAAE,EAAE,cAAc,EAAE,GAAG,EAAE;AACvD;AACA,GAAG,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,mBAAmB,CAAC,IAAI,EAAE,EAAE,cAAc,EAAE,GAAG,EAAE;AAC1D;AACA,GAAG,OAAO,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,cAAc,CAAC,IAAI,EAAE,EAAE,cAAc,EAAE,GAAG,EAAE;AACrD;AACA,GAAG,OAAO,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,cAAc,CAAC,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,iBAAiB,CAAC,IAAI,EAAE,EAAE,cAAc,EAAE,OAAO,EAAE,GAAG,EAAE;AACjE;AACA,GAAG,OAAO,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,cAAc,CAAC,EAAE,OAAO,CAAC,CAAC;AAC3E;;;;"}