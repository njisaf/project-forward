import * as _runtime_svelte_util from '@typhonjs-fvtt/runtime/svelte/util';
import * as svelte_store from 'svelte/store';
import { Readable, Writable } from 'svelte/store';
import { TJSWebStorage } from '@typhonjs-fvtt/runtime/svelte/store/web-storage';
import { TJSGameSettings } from '@typhonjs-fvtt/runtime/svelte/store/fvtt/settings';
import { TJSStyleManager } from '@typhonjs-fvtt/runtime/util/dom/style';

/**
 * Controls preparation and processing of registered game settings w/ TJSGameSettings. Game settings are parsed
 * for UI display by TJSSettingsEdit. The store `showSettings` is utilized in TJSSettingsSwap component to provide
 * an easy way to flip between settings component or any main slotted component.
 */
interface UIControl {
  /**
   * @returns {{showSettings: Readable<boolean>}} Returns the managed stores.
   */
  get stores(): {
    showSettings: Readable<boolean>;
  };
  /**
   * @returns {boolean} Current `showSettings` state.
   */
  get showSettings(): boolean;
  /**
   * Sets current `showSettings` state.
   *
   * @param {boolean}  showSettings - New `showSettings` state.
   */
  set showSettings(showSettings: boolean);
  /**
   * Adds a custom section / folder defined by the provided TJSSettingsCustomSection options object.
   *
   * @param {TJSSettingsCustomSection} options - The configuration object for the custom section.
   */
  addSection(options: TJSSettingsCustomSection): void;
  /**
   * Creates the UISettingsData object by parsing stored settings in
   *
   * @param {TJSSettingsCreateOptions} [options] - Optional parameters.
   *
   * @returns {TJSSettingsUIData} Parsed UI settings data.
   */
  create(options?: TJSSettingsCreateOptions): TJSSettingsUIData;
  /**
   * Convenience method to swap `showSettings`.
   *
   * @returns {boolean} New `showSettings` state.
   */
  swapShowSettings(): boolean;
}
type TJSSettingsCreateOptions = {
  /**
   * Defines the effects added to TJS components; ripple by default.
   */
  efx?: string;
  /**
   * TRL TJSWebStorage (session) instance to serialize folder state and scrollbar position.
   */
  storage?: TJSWebStorage;
};
type TJSSettingsCustomSection = {
  /**
   * Svelte component constructor function for custom section.
   */
  class: Function;
  /**
   * Svelte component constructor function for custom section.
   */
  props?: Function;
  /**
   * Inline styles for the section element.
   */
  styles?: object;
  /**
   * A folder label or TJSSettingsCustomSectionFolder object.
   */
  folder?: string | TJSSettingsCustomSectionFolder;
};
type TJSSettingsCustomSectionFolder = {
  /**
   * The folder label.
   */
  label: string;
  /**
   * A Svelte component config object defining TJSSvgFolder summary end component.
   */
  summaryEnd?: _runtime_svelte_util.TJSSvelte.Config.Embed;
  /**
   * Inline styles for the `TJSSvgFolder`; useful for setting CSS variables.
   */
  styles?: {
    [key: string]: string | null;
  };
};
type TJSSettingsUIData = {
  /**
   * Sorted folders with associated settings and label.
   */
  folders: {
    label: string;
    settings: object[];
  }[];
  /**
   * Top level settings data.
   */
  topLevel: object[];
  /**
   * Custom sections.
   */
  sections: object[];
  /**
   * The store for `applyScrolltop`.
   */
  storeScrollbar: Writable<number>;
  /**
   * The bound destroy callback function for received of TJSSettingsUIData.
   */
  destroy?: Function;
};

/**
 * Extends {@link TJSGameSettings} with UI control for working with `TJSSettingsEdit` and `TJSSettingsSwap`
 * components. Instead of extending `TJSGameSettings` simply extend `TJSGameSettingsWithUI` instead when creating
 * reactive game settings that utilize the above components.
 */
declare class TJSGameSettingsWithUI extends TJSGameSettings {
  /**
   * @returns {import('./types').UIControl} The associated UIControl.
   */
  get uiControl(): UIControl;
  #private;
}

/**
 * Must be constructed from a TJSGameSettings instance `init` / initialize method called from the `ready` Foundry VTT
 * hook.
 */
declare class TJSThemeStore {
  /**
   * @param {TJSThemeStoreOptions} options - Options
   */
  constructor(options: TJSThemeStoreOptions);
  /**
   * @returns { {[key: string]: import('svelte/store').Writable<string|null>} } All stores.
   */
  get stores(): {
    [key: string]: svelte_store.Writable<string | null>;
  };
  /**
   * Sets the theme store with new data.
   *
   * @param {object}   themeData -
   *
   * @returns {TJSThemeStore} This theme store instance.
   */
  set(themeData: object): TJSThemeStore;
  /**
   * @param {import('svelte/store').Subscriber<{ [key: string]: object }>} handler - Callback function that is invoked on
   * update / changes. Receives copy of the theme data.
   *
   * @returns {import('svelte/store').Unsubscriber} Unsubscribe function.
   */
  subscribe(
    handler: svelte_store.Subscriber<{
      [key: string]: object;
    }>,
  ): svelte_store.Unsubscriber;
  #private;
}
type TJSThemeStoreConfig = {
  /**
   * A semantic version string.
   */
  version: string;
  /**
   * An iterable list of theme store component data.
   */
  components: Iterable<TJSThemeStoreComponent>;
};
type TJSThemeStoreComponent = {
  /**
   * Type of component / variable.
   */
  type: string;
  /**
   * An optional default value for a CSS variable.
   */
  default?: string;
  /**
   * An optional label for any variable / setting related component.
   */
  label?: string;
  /**
   * A CSS variable name.
   */
  var?: string;
};
type TJSThemeStoreOptions = {
  /**
   * The world setting namespace.
   */
  namespace: string;
  /**
   * The world setting key.
   */
  key: string;
  /**
   * An associated TJSGameSettings instance.
   */
  gameSettings: TJSGameSettings;
  /**
   * An associated TJSStyleManager instance to manipulate CSS variables.
   */
  styleManager: TJSStyleManager;
  /**
   * Data defining CSS theme store components and variables.
   */
  config: TJSThemeStoreConfig;
};

export {
  TJSGameSettingsWithUI,
  type TJSSettingsCreateOptions,
  type TJSSettingsCustomSection,
  type TJSSettingsCustomSectionFolder,
  type TJSSettingsUIData,
  TJSThemeStore,
  type TJSThemeStoreComponent,
  type TJSThemeStoreConfig,
  type TJSThemeStoreOptions,
  type UIControl,
};
