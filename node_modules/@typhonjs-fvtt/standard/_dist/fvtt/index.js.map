{"version":3,"file":"index.js","sources":["../../src/fvtt/util/FVTTVersion.js","../../src/fvtt/font/FontManager.js","../../src/fvtt/style/FoundryStyles.js"],"sourcesContent":["/**\n * Provides a helper class to determine the version of the Foundry platform starting a version `9`.\n *\n * Note: You must use any of these utility methods after the Foundry `init` hook.\n */\nexport class FVTTVersion\n{\n   static #regexMajorVersion = /(\\d+)\\./;\n\n   /**\n    * Returns true when Foundry is at least the specific major version number provided.\n    *\n    * Note: `game` must be initialized for correct comparison; use after Foundry `init` hook.\n    *\n    * @param {number}   version - Major version to check against.\n    *\n    * @returns {boolean} Foundry version is at least the major version specified.\n    */\n   static isAtLeast(version)\n   {\n      if (globalThis.game?.version === void 0)\n      {\n         throw new Error(`FVTTVersion.isAtLeast error: Foundry VTT global 'game' object is not initialized.`);\n      }\n\n      if (!Number.isInteger(version) && version < 9)\n      {\n         throw new TypeError(`'version' is not a positive integer greater than or equals '9'.`);\n      }\n\n      return !globalThis.foundry.utils.isNewerVersion(version, globalThis.game.version);\n   }\n\n   /**\n    * Returns true when Foundry is inclusively between the min / max major version numbers provided.\n    *\n    * @param {number}   min - Major minimum version to check against.\n    *\n    * @param {number}   max - Major maximum version to check against.\n    *\n    * @returns {boolean} Foundry version is at least the major version specified.\n    */\n   static isBetween(min, max)\n   {\n      if (globalThis.game?.version === void 0)\n      {\n         throw new Error(`FVTTVersion.isBetween error: Foundry VTT global 'game' object is not initialized.`);\n      }\n\n      if (!Number.isInteger(min) && min < 9)\n      {\n         throw new TypeError(\n          `FVTTVersion.isBetween error: 'min' is not a positive integer greater than or equals '9'.`);\n      }\n\n      if (!Number.isInteger(max) && max < 9)\n      {\n         throw new TypeError(\n          `FVTTVersion.isBetween error: 'max' is not a positive integer greater than or equals '9'.`);\n      }\n\n      if (min > max)\n      {\n         throw new TypeError(`FVTTVersion.isBetween error: 'min' is greater than 'max'.`);\n      }\n\n      const match = this.#regexMajorVersion.exec(globalThis.game.version);\n      if (!match)\n      {\n         throw new Error(`FVTTVersion.isBetween error: Could not parse 'globalThis.game.version'.`);\n      }\n\n      const version = parseInt(match[1], 10);\n\n      return version >= min && version <= max;\n   }\n}\n","import {\n   isObject,\n   klona }              from '#runtime/util/object';\n\nimport { FVTTVersion }  from '../util/FVTTVersion.js';\n\n/**\n * Loads FVTT core fonts supporting `FontConfig` on Foundry v10+.\n *\n * Note: This class contains code modified from Foundry VTT core client code. There are only so many ways to process\n * core Foundry data structures correctly.\n */\nexport class FontManager\n{\n   /**\n    * Collect all the font definitions and combine them.\n    *\n    * @returns { {[key: string]: fvtt.FontFamilyDefinition}[] } Core font definitions.\n    */\n   static getCoreDefinitions()\n   {\n      /** @type { {[key: string]: fvtt.FontFamilyDefinition}[] } */\n      const fonts = [];\n\n      if (FVTTVersion.isAtLeast(11))\n      {\n         if (isObject(globalThis.CONFIG?.fontDefinitions))\n         {\n            fonts.push(klona(globalThis.CONFIG.fontDefinitions));\n         }\n\n         const coreFonts = globalThis.game?.settings.get('core', 'fonts');\n\n         if (Array.isArray(coreFonts))\n         {\n            fonts.push(klona(coreFonts));\n         }\n      }\n\n      FontManager.removeDuplicateDefinitions(fonts);\n\n      return fonts;\n   }\n\n   /**\n    * Load a font definition.\n    *\n    * @param {string}               fontSpecification - The font specification.\n    *\n    * @param {string}               family - The font family name (case-sensitive).\n    *\n    * @param {fvtt.FontFamilyDefinition} definition - The font family definition.\n    *\n    * @param {Document}             document - Target Document to load font into.\n    *\n    * @returns {Promise<boolean>} Returns true if the font was successfully loaded.\n    */\n   static async #loadFont(fontSpecification, family, definition, document)\n   {\n      try\n      {\n         for (const fontEntry of definition.fonts)\n         {\n            // Collect URLs from FontDefinition.\n            const urls = fontEntry.urls.map((url) => `url(\"${url}\")`).join(', ');\n\n            // Note: 'font' contains 'FontFaceDescriptors' data.\n            const fontFace = new FontFace(family, urls, fontEntry);\n            await fontFace.load();\n\n            document.fonts.add(fontFace);\n         }\n\n         await document.fonts.load(fontSpecification);\n      }\n      catch (err)\n      {\n         console.warn(`Font family \"${family}\" failed to load: `, err);\n         return false;\n      }\n\n      if (!document.fonts.check(fontSpecification))\n      {\n         console.warn(`Font family \"${family}\" failed to load.`);\n         return false;\n      }\n\n      return true;\n   }\n\n   /**\n    * Ensure that fonts have loaded and are ready for use.\n    * Enforce a maximum timeout in milliseconds.\n    * Proceed after that point even if fonts are not yet available.\n    *\n    * @param {object} [opts] - Optional parameters.\n    *\n    * @param {number} [opts.ms=4500] - The maximum time to spend loading fonts before proceeding.\n    *\n    * @param {Document} [opts.document] - The target document to load the fonts into.\n    *\n    * @param {boolean} [opts.editor=true] - When true verifies the `editor` field of {@link FontFamilyDefinition}.\n    *\n    * @param {(\n    *    {[key: string]: fvtt.FontFamilyDefinition}[] |\n    *    {[key: string]: fvtt.FontFamilyDefinition}\n    * )} [opts.fonts] - A custom set of font family definitions to load. If not defined the core font family definitions\n    *    are loaded.\n    *\n    * @returns {Promise<void>}\n    */\n   static async loadFonts({ ms = 4500, document = globalThis.document, editor = true, fonts } = {})\n   {\n      // TODO sanity checks\n\n      const allFonts = fonts ? Array.isArray(fonts) ? fonts : [fonts] : this.getCoreDefinitions();\n\n      const promises = [];\n\n      for (const definitions of allFonts)\n      {\n         if (isObject(definitions))\n         {\n            for (const [family, definition] of Object.entries(definitions))\n            {\n               // Don't load a font that is not marked to be used in the editor.\n               if (editor && (typeof definition.editor !== 'boolean' || !definition.editor)) { continue; }\n\n               const fontSpecification = `1rem \"${family}\"`;\n\n               // TODO: If there is a better / reliable way to check if a font is already loaded then implement below.\n               // `document.fonts.check` doesn't quite work for the intended purpose.\n               // Early out if the font is already loaded.\n               // if (document.fonts.check(fontSpecification)) { continue; }\n\n               promises.push(this.#loadFont(fontSpecification, family, definition, document));\n            }\n         }\n      }\n\n      const timeout = new Promise((resolve) => setTimeout(resolve, ms));\n      const ready = Promise.allSettled(promises).then(() => document.fonts.ready);\n\n      return Promise.race([ready, timeout]);\n   }\n\n   /**\n    * Removes duplicate font definitions.\n    *\n    * @param { {[key: string]: fvtt.FontFamilyDefinition}[] }  fonts - An array of FontFamilyDefinition objects\n    *        to process.\n    *\n    * @returns { {[key: string]: fvtt.FontFamilyDefinition}[] } Filtered font definitions.\n    */\n   static removeDuplicateDefinitions(fonts)\n   {\n      if (!Array.isArray(fonts))\n      {\n         throw new TypeError(`FontManager.removeDuplicateDefinitions error: 'fonts' is not an array.`);\n      }\n\n      const familySet = new Set();\n\n      for (const definitions of fonts)\n      {\n         if (!isObject(definitions))\n         {\n            throw new TypeError(`FontManager.removeDuplicateDefinitions error: 'definitions' is not an object.`);\n         }\n\n         for (const family of Object.keys(definitions))\n         {\n            // Remove duplicate from current definitions set.\n            if (familySet.has(family))\n            {\n               delete definitions[family];\n            }\n            else\n            {\n               familySet.add(family);\n            }\n         }\n      }\n\n      return fonts;\n   }\n}\n","import { isObject } from '#runtime/util/object';\n\n/**\n * Parses the core Foundry style sheet creating an indexed object of properties by selector.\n */\nexport class FoundryStyles\n{\n   static #sheet = void 0;\n\n   /** @type {Map<string, {[key: string]: string}>} */\n   static #sheetMap = new Map();\n\n   static #initialized = false;\n\n   /**\n    * Called once on initialization / first usage. Parses the core foundry style sheet.\n    */\n   static #initialize()\n   {\n      this.#initialized = true;\n\n      const styleSheets = Array.from(document.styleSheets).filter((entry) => entry.href !== null);\n\n      let sheet;\n\n      const foundryStyleSheet = globalThis.foundry.utils.getRoute('/css/style.css');\n\n      // Find the core Foundry stylesheet.\n      for (const styleSheet of styleSheets)\n      {\n         let url;\n\n         try\n         {\n            url = new URL(styleSheet.href);\n         }\n         catch (err) { continue; }\n\n         if (typeof url.pathname === 'string' && url.pathname === foundryStyleSheet)\n         {\n            this.#sheet = sheet = styleSheet;\n            break;\n         }\n      }\n\n      // Quit now if the Foundry style sheet was not found.\n      if (!sheet) { return; }\n\n      // Parse each CSSStyleRule and build the map of selectors to parsed properties.\n      for (const rule of sheet.cssRules)\n      {\n         if (!(rule instanceof CSSStyleRule)) { continue; }\n\n         const obj = {};\n\n         // Parse `cssText` into an object of properties & values.\n         for (const entry of rule.style.cssText.split(';'))\n         {\n            const parts = entry.split(':');\n\n            // Sanity check.\n            if (parts.length < 2) { continue; }\n\n            obj[parts[0].trim()] = parts[1].trim();\n         }\n\n         this.#sheetMap.set(rule.selectorText, obj);\n      }\n   }\n\n   /**\n    * Gets the properties object associated with the selector. Try and use a direct match otherwise all keys\n    * are iterated to find a selector string that includes the `selector`.\n    *\n    * @param {string}   selector - Selector to find.\n    *\n    * @returns { {[key: string]: string} } Properties object.\n    */\n   static getProperties(selector)\n   {\n      if (!this.#initialized) { this.#initialize(); }\n\n      // If there is a direct selector match then return a value immediately.\n      if (this.#sheetMap.has(selector))\n      {\n         return this.#sheetMap.get(selector);\n      }\n\n      for (const key of this.#sheetMap.keys())\n      {\n         if (key.includes(selector)) { return this.#sheetMap.get(key); }\n      }\n\n      return void 0;\n   }\n\n   /**\n    * Gets a specific property value from the given `selector` and `property` key. Try and use a direct selector\n    * match otherwise all keys are iterated to find a selector string that includes `selector`.\n    *\n    * @param {string}   selector - Selector to find.\n    *\n    * @param {string}   property - Specific property to locate.\n    *\n    * @returns {string|undefined} Property value.\n    */\n   static getProperty(selector, property)\n   {\n      if (!this.#initialized) { this.#initialize(); }\n\n      // If there is a direct selector match then return a value immediately.\n      if (this.#sheetMap.has(selector))\n      {\n         const data = this.#sheetMap.get(selector);\n         return isObject(data) && property in data ? data[property] : void 0;\n      }\n\n      for (const key of this.#sheetMap.keys())\n      {\n         if (key.includes(selector))\n         {\n            const data = this.#sheetMap.get(key);\n            if (isObject(data) && property in data) { return data[property]; }\n         }\n      }\n\n      return void 0;\n   }\n}\n"],"names":[],"mappings":"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"}