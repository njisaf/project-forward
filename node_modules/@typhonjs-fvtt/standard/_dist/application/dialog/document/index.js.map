{"version":3,"file":"index.js","sources":["../../../../src/application/dialog/document/TJSDocumentCreate.ts","../../../../src/application/dialog/document/TJSDocumentDelete.ts","../../../../src/application/dialog/document/TJSDocumentImport.ts","../../../../src/application/dialog/document/TJSDocumentOwnership.ts","../../../../src/application/dialog/document/TJSFolderCreateUpdate.ts","../../../../src/application/dialog/document/TJSFolderDelete.ts","../../../../src/application/dialog/document/TJSFolderExport.ts","../../../../src/application/dialog/document/TJSFolderRemove.ts","../../../../src/application/dialog/document/TJSFolderRolltable.ts","../../../../src/application/dialog/document/TJSDocumentDialog.ts"],"sourcesContent":["import { TJSDialog }             from '#runtime/svelte/application';\n\nimport {\n   isDocumentClass,\n   isFolderClass }               from '#runtime/types/fvtt-shim/guard';\n\nimport { localize }              from '#runtime/util/i18n';\n\nimport { TJSDocumentCreateComp } from '#standard/component/fvtt-internal';\n\nimport type { SvelteApp }        from '#runtime/svelte/application';\n\n/**\n * Provides a dialog for creating documents that by default is modal and not draggable.\n */\nexport class TJSDocumentCreate extends TJSDialog\n{\n   /**\n    * Create a new Document of the type specified by `documentCls` by rendering a dialog window to provide basic\n    * creation details.\n    *\n    * @param documentCls - Document class to create.\n    *\n    * @param [data] - Document data.\n    *\n    * @param [context] - Additional context options or dialog positioning options.\n    *\n    * @param [context.parent] - A parent Document within which these Documents should be embedded.\n    *\n    * @param [context.pack] - A Compendium pack identifier within which the Documents should be modified.\n    *\n    * @param [context.renderSheet] - Render the sheet for the new document.\n    *\n    * @param [context.options] - Rest of options to pass to TJSDialog / Application.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    */\n   private constructor(documentCls: fvtt.DocumentConstructor, data: object = {}, { parent = null, pack = null,\n    renderSheet = true, ...options }: { parent?: object | null, pack?: string | null, renderSheet?: boolean } &\n     SvelteApp.OptionsCore = {}, dialogData: TJSDialog.OptionsData = {})\n   {\n      super({\n         modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,\n         draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,\n         focusFirst: true,\n         focusKeep: true,\n         minimizable: false,\n         ...dialogData,\n         content: {\n            class: TJSDocumentCreateComp,\n            props: {\n               documentCls,\n               data,\n               parent,\n               pack,\n               renderSheet\n            }\n         },\n         title: localize('DOCUMENT.Create', { type: localize(documentCls?.metadata?.label) }),\n         buttons: {\n            create: {\n               autoClose: false,\n               icon: 'fas fa-check',\n               label: localize('DOCUMENT.Create', { type: localize(documentCls?.metadata?.label) }),\n               onPress: 'requestSubmit'\n            }\n         },\n         default: 'create'\n      }, { width: 320, ...options });\n   }\n\n   /**\n    * Create a new Document of the type specified by `documentCls` by rendering a dialog window to provide basic\n    * creation details.\n    *\n    * @param documentCls - Document class to create.\n    *\n    * @param [data] - Document data.\n    *\n    * @param [context={}] - Additional context options or dialog positioning options.\n    *\n    * @param [context.parent] - A parent Document within which these Documents should be embedded.\n    *\n    * @param [context.pack] - A Compendium pack identifier within which the Documents should be modified.\n    *\n    * @param [context.renderSheet] - Render the sheet for the new document.\n    *\n    * @param [context.options] - Rest of options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The newly created document or a falsy value; either 'false' for\n    *          cancelling or 'null' if the user closed the dialog via `<Esc>` or the close header button.\n    */\n   static async show<D extends fvtt.DocumentConstructor>(documentCls: D, data: object = {}, { parent = null,\n    pack = null, renderSheet = true, ...options }: { parent?: fvtt.Document | null, pack?: string | null,\n     renderSheet?: boolean } & Partial<SvelteApp.OptionsCore> = {}, dialogData: TJSDialog.OptionsData = {}):\n      Promise<InstanceType<D> | false | null>\n   {\n      if (!isDocumentClass(documentCls))\n      {\n         console.warn(`TJSDocumentCreate - show - warning: 'documentCls' is not a Document.`);\n         return null;\n      }\n\n      if (isFolderClass(documentCls))\n      {\n         console.warn(`TJSDocumentCreate - show - warning: 'documentCls' is a Folder.`);\n         return null;\n      }\n\n      return new TJSDocumentCreate(documentCls, data, { parent, pack, renderSheet, ...options }, dialogData).wait();\n   }\n}\n","import { TJSDialog }             from '#runtime/svelte/application';\n\nimport {\n   isDocument,\n   isFolder }                    from '#runtime/types/fvtt-shim/guard';\n\nimport { localize }              from '#runtime/util/i18n';\nimport { hasSetter }             from '#runtime/util/object';\n\nimport { TJSDocumentDeleteComp } from '#standard/component/fvtt-internal';\n\nimport type { SvelteApp }        from '#runtime/svelte/application';\n\n/**\n * Provides a reactive dialog for deleting documents that by default is modal and not draggable. An additional set of\n * accessors for the document assigned are available via the `this.reactive.document`. You may swap out the document at\n * any time by setting it to a different document.\n */\nexport class TJSDocumentDelete extends TJSDialog\n{\n   /**\n    * @param document - Document to delete.\n    *\n    * @param [options] - TJSDialog / SvelteApp options.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    */\n   private constructor(document: fvtt.Document, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {})\n   {\n      super({\n         modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,\n         draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,\n         focusKeep: true,\n         minimizable: false,\n         ...dialogData,\n         content: {\n            class: TJSDocumentDeleteComp,\n            props: { document }\n         },\n         title: `${localize('DOCUMENT.Delete', { type: localize(document.constructor.metadata.label) })}: ${\n          document.name}`,\n         buttons: {\n            delete: {\n               icon: 'fas fa-trash',\n               label: localize('DOCUMENT.Delete', { type: localize(document.constructor.metadata.label) }),\n               onPress: 'deleteDocument'\n            },\n            cancel: {\n               icon: 'fas fa-times',\n               label: 'Cancel',\n               onPress: (): boolean => false\n            }\n         },\n         default: 'cancel'\n      }, options);\n\n      /**\n       * @member {object} document - Adds accessors to SvelteReactive to get / set the document associated with\n       *                             Document.\n       *\n       * @memberof SvelteReactive#\n       */\n      Object.defineProperty(this.reactive, 'document', {\n         get: (): fvtt.Document => this.svelte?.appShell?.dialogComponent?.document,\n         set: (document: fvtt.Document): void =>\n         {\n            const dialogComponent = this.svelte?.appShell?.dialogComponent;\n            if (hasSetter(dialogComponent, 'document')) { dialogComponent.document = document; }\n         }\n      });\n   }\n\n   /**\n    * Shows a modal / non-draggable dialog to delete a document.\n    *\n    * @param document - Document to delete.\n    *\n    * @param [options] - TJSDialog / SvelteApp options.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The document if deleted or a falsy value; either 'false' for cancelling or 'null' if the user closed the\n    *          dialog via `<Esc>` or the close header button.\n    */\n   static async show<D extends fvtt.Document>(document: D, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {}): Promise<D | false | null>\n   {\n      if (!isDocument(document))\n      {\n         console.warn(`TJSDocumentDelete - show - warning: 'document' is not a Document.`);\n         return null;\n      }\n\n      if (isFolder(document))\n      {\n         console.warn(`TJSDocumentDelete - show - warning: 'document' is a Folder.`);\n         return null;\n      }\n\n      return new TJSDocumentDelete(document, options, dialogData).wait();\n   }\n}\n","import { TJSDialog }             from '#runtime/svelte/application';\n\nimport {\n   isDocument,\n   isFolder }                    from '#runtime/types/fvtt-shim/guard';\n\nimport { localize }              from '#runtime/util/i18n';\nimport { hasSetter }             from '#runtime/util/object';\n\nimport { TJSDocumentImportComp } from '#standard/component/fvtt-internal';\n\nimport type { SvelteApp }        from '#runtime/svelte/application';\n\n/**\n * Provides a reactive dialog for importing documents that by default is modal and not draggable. An additional set of\n * accessors for the document assigned are available via the `this.reactive.document`. You may swap out the document at\n * any time by setting it to a different document.\n */\nexport class TJSDocumentImport extends TJSDialog\n{\n   /**\n    * Render an import dialog for updating the data related to this Document through an exported JSON file\n    *\n    * @param document - The document to import JSON to...\n    *\n    * @param [options] - Options to pass to TJSDialog /\n    *        Application.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    */\n   private constructor(document: fvtt.Document, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {})\n   {\n      super({\n         modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,\n         draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,\n         focusKeep: true,\n         minimizable: false,\n         ...dialogData,\n         title: `${localize('DOCUMENT.ImportData')}: ${document.name}`,\n         content: {\n            class: TJSDocumentImportComp,\n            props: { document }\n         },\n         buttons: {\n            import: {\n               autoClose: false, // Don't automatically close on button onclick.\n               icon: 'fas fa-file-import',\n               label: 'Import',\n               onPress: 'requestSubmit'\n            },\n            cancel: {\n               icon: 'fas fa-times',\n               label: 'Cancel',\n               onPress: (): boolean => false\n            }\n         },\n         default: 'cancel'\n      }, { width: 400, ...options });\n\n      /**\n       * @member {object} document - Adds accessors to SvelteReactive to get / set the document associated with\n       *                             Document.\n       *\n       * @memberof SvelteReactive#\n       */\n      Object.defineProperty(this.reactive, 'document', {\n         get: (): fvtt.Document => this.svelte?.appShell?.dialogComponent?.document,\n         set: (document: fvtt.Document): void =>\n         {\n            const dialogComponent = this.svelte?.appShell?.dialogComponent;\n            if (hasSetter(dialogComponent, 'document')) { dialogComponent.document = document; }\n         }\n      });\n   }\n\n   /**\n    * Render an import dialog for updating the data related to this Document through an exported JSON file\n    *\n    * @param document - The document to import JSON to...\n    *\n    * @param [options] - Options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The document after import completes or a falsy value; either 'false' for cancelling or 'null' if the\n    *          user closed the dialog via `<Esc>` or the close header button.\n    */\n   static async show<D extends fvtt.Document>(document: D, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {}): Promise<D | false | null>\n   {\n      if (!isDocument(document))\n      {\n         console.warn(`TJSDocumentImport - show - warning: 'document' is not a Document.`);\n         return null;\n      }\n\n      if (isFolder(document))\n      {\n         console.warn(`TJSDocumentImport - show - warning: 'document' is a Folder; unsupported operation'.`);\n         return null;\n      }\n\n      return new TJSDocumentImport(document, options, dialogData).wait();\n   }\n}\n","import { TJSDialog }                from '#runtime/svelte/application';\nimport { isDocument }               from '#runtime/types/fvtt-shim/guard';\nimport { localize }                 from '#runtime/util/i18n';\nimport { hasSetter }                from '#runtime/util/object';\n\nimport { TJSDocumentOwnershipComp } from '#standard/component/fvtt-internal';\n\nimport type { SvelteApp }           from '#runtime/svelte/application';\n\n/**\n * Provides a reactive dialog for permission control that by default is modal and not draggable. An additional set of\n * accessors for the document assigned are available via the `this.reactive.document`. You may swap out the document at\n * any time by setting it to a different document.\n */\nexport class TJSDocumentOwnership extends TJSDialog\n{\n   /**\n    * @param document - Document to delete.\n    *\n    * @param [options] - TJSDialog / SvelteApp options.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    */\n   private constructor(document: fvtt.Document, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {})\n   {\n      super({\n         modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,\n         draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,\n         focusFirst: true,\n         focusKeep: true,\n         minimizable: false,\n         ...dialogData,\n         content: {\n            class: TJSDocumentOwnershipComp,\n            props: { document }\n         },\n         title: `${localize('OWNERSHIP.Title')}: ${document.name}`,\n         buttons: {\n            save: {\n               autoClose: false,\n               icon: 'far fa-save',\n               label: 'Save Changes',\n               onPress: 'requestSubmit'\n            }\n         },\n         default: 'save'\n      }, options);\n\n      /**\n       * @member {object} document - Adds accessors to SvelteReactive to get / set the document associated with\n       *                             Document.\n       *\n       * @memberof SvelteReactive#\n       */\n      Object.defineProperty(this.reactive, 'document', {\n         get: (): fvtt.Document => this.svelte?.appShell?.dialogComponent?.document,\n         set: (document: fvtt.Document): void =>\n         {\n            const dialogComponent = this.svelte?.appShell?.dialogComponent;\n            if (hasSetter(dialogComponent, 'document')) { dialogComponent.document = document; }\n         }\n      });\n   }\n\n   /**\n    * Change permissions of a document by rendering a dialog to alter the default and all user / player permissions.\n    *\n    * @param document - Document instance to modify.\n    *\n    * @param [options] - Options to pass to TJSDialog / Application.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The modified document or 'null' if the user closed the dialog via `<Esc>` or the close header button.\n    */\n   static async show<D extends fvtt.Document>(document: D, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {}): Promise<D | null>\n   {\n      if (!isDocument(document))\n      {\n         console.warn(`TJSDocumentOwnership - show - warning: 'document' is not a Document.`);\n         return null;\n      }\n\n      return new TJSDocumentOwnership(document, options, dialogData).wait();\n   }\n}\n","import { TJSDialog }                   from '#runtime/svelte/application';\nimport { isFolder }                    from '#runtime/types/fvtt-shim/guard';\nimport { localize }                    from '#runtime/util/i18n';\nimport { hasSetter }                   from '#runtime/util/object';\n\nimport { TJSFolderCreateUpdateComp }   from '#standard/component/fvtt-internal';\n\nimport type { SvelteApp }              from '#runtime/svelte/application';\n\n/**\n * Provides a reactive dialog for modifying folders that by default is modal and not draggable. An additional set of\n * accessors for the folder assigned are available via the `this.reactive.document`. You may swap out the folder at\n * any time by setting it to a different folder document.\n */\nexport class TJSFolderCreateUpdate extends TJSDialog\n{\n   /**\n    * @param document - Document to delete.\n    *\n    * @param [options] - TJSDialog / SvelteApp options.\n    *\n    * @param {TJSDialog.OptionsData} [dialogData] - Optional data to modify dialog.\n    */\n   private constructor(document: fvtt.Document, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {})\n   {\n      super({\n         modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,\n         draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,\n         focusFirst: true,\n         focusKeep: true,\n         minimizable: false,\n         ...dialogData,\n         content: {\n            class: TJSFolderCreateUpdateComp,\n            props: { document }\n         },\n         title: document.id ? `${localize('FOLDER.Update')}: ${document.name}` : localize('FOLDER.Create'),\n         buttons: {\n            submit: {\n               autoClose: false,\n               icon: 'fas fa-check',\n               label: localize(document?.id ? 'FOLDER.Update' : 'FOLDER.Create'),\n               onPress: 'requestSubmit'\n            }\n         },\n         default: 'submit'\n      }, options);\n\n      /**\n       * @member {object} document - Adds accessors to SvelteReactive to get / set the document associated with\n       *                             Document.\n       *\n       * @memberof SvelteReactive#\n       */\n      Object.defineProperty(this.reactive, 'document', {\n         get: (): fvtt.Document => this.svelte?.appShell?.dialogComponent?.document,\n         set: (document: fvtt.Document): void =>\n         {\n            const dialogComponent = this.svelte?.appShell?.dialogComponent;\n            if (hasSetter(dialogComponent, 'document')) { dialogComponent.document = document; }\n         }\n      });\n   }\n\n   /**\n    * Create a new Folder by rendering a dialog to provide basic creation details.\n    *\n    * @param {object} folderData - Initial data with which to populate the creation form.\n    *\n    * @param [options] - Options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The newly created Folder or null if the dialog is closed.\n    */\n   static async showCreate(folderData: { type: string }, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {}): Promise<fvtt.Folder | null>\n   {\n      // @ts-ignore\n      if (!(folderData?.type in globalThis.CONFIG))\n      {\n         console.warn(\n          `TJSFolderCreateUpdate - showCreate - warning: 'type' attribute of folderData is not a Document.`);\n         return null;\n      }\n\n      // @ts-ignore\n      const label: string = localize(Folder.metadata.label);\n\n      // @ts-ignore\n      const data = globalThis.foundry.utils.mergeObject({\n         name: localize('DOCUMENT.New', { type: label }),\n         sorting: 'a',\n      }, folderData);\n\n      // @ts-ignore\n      const document = new Folder(data);\n\n      return new TJSFolderCreateUpdate(document, options, dialogData).wait();\n   }\n\n   /**\n    * Updates an existing Folder by rendering a dialog window with basic details.\n    *\n    * @param document - The folder to edit.\n    *\n    * @param [options] - Options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The modified Folder or null if the dialog is closed.\n    */\n   static async showUpdate(document: fvtt.Folder, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {}): Promise<fvtt.Folder | null>\n   {\n      if (!isFolder(document))\n      {\n         console.warn(`TJSFolderCreateUpdate - show - warning: 'document' is not a Folder.`);\n         return null;\n      }\n\n      return new TJSFolderCreateUpdate(document, options, dialogData).wait();\n   }\n}\n","import { TJSDialog }             from '#runtime/svelte/application';\nimport { isFolder }              from '#runtime/types/fvtt-shim/guard';\nimport { localize }              from '#runtime/util/i18n';\nimport { hasSetter }             from '#runtime/util/object';\n\nimport { TJSFolderDeleteComp }   from '#standard/component/fvtt-internal';\n\nimport type { SvelteApp }        from '#runtime/svelte/application';\n\n/**\n * Provides a reactive dialog for deleting a folder that by default is modal and not draggable. An additional set of\n * accessors for the folder assigned are available via the `this.reactive.document`. You may swap out the folder at any\n * time by setting it to a different folder document.\n */\nexport class TJSFolderDelete extends TJSDialog\n{\n   /**\n    * Deletes a folder and does delete sub-folders / documents.\n    *\n    * @param document - Document to delete.\n    *\n    * @param [options] - TJSDialog / SvelteApp options.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    */\n   private constructor(document: fvtt.Document, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {})\n   {\n      super({\n         modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,\n         draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,\n         focusKeep: true,\n         minimizable: false,\n         ...dialogData,\n         content: {\n            class: TJSFolderDeleteComp,\n            props: { document }\n         },\n         title: `${localize('FOLDER.Delete')}: ${document.name}`,\n         buttons: {\n            delete: {\n               icon: 'fas fa-dumpster',\n               label: 'FOLDER.Delete',\n               onPress: 'deleteFolder'\n            },\n            cancel: {\n               icon: 'fas fa-times',\n               label: 'Cancel',\n               onPress: (): boolean => false\n            }\n         },\n         default: 'cancel'\n      }, options);\n\n      /**\n       * @member {object} document - Adds accessors to SvelteReactive to get / set the document associated with\n       *                             Document.\n       *\n       * @memberof SvelteReactive#\n       */\n      Object.defineProperty(this.reactive, 'document', {\n         get: (): fvtt.Document => this.svelte?.appShell?.dialogComponent?.document,\n         set: (document: fvtt.Document): void =>\n         {\n            const dialogComponent = this.svelte?.appShell?.dialogComponent;\n            if (hasSetter(dialogComponent, 'document')) { dialogComponent.document = document; }\n         }\n      });\n   }\n\n   /**\n    * Deletes a folder and does delete sub-folders / documents.\n    *\n    * @param document - Folder to delete.\n    *\n    * @param [options] - Options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The deleted Folder or a falsy value; either 'false' for cancelling or 'null' if the user closed the\n    *          dialog via `<Esc>` or the close header button.\n    */\n   static async show(document: fvtt.Folder, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {}): Promise<fvtt.Folder | false | null>\n   {\n      if (!isFolder(document))\n      {\n         console.warn(`TJSFolderDelete - show - warning: 'document' is not a Folder.`);\n         return null;\n      }\n\n      return new TJSFolderDelete(document, options, dialogData).wait();\n   }\n}\n","import { TJSDialog }             from '#runtime/svelte/application';\nimport { isFolder }              from '#runtime/types/fvtt-shim/guard';\nimport { localize }              from '#runtime/util/i18n';\n\nimport { TJSFolderExportComp }   from '#standard/component/fvtt-internal';\n\nimport type { SvelteApp }        from '#runtime/svelte/application';\n\n/**\n * Provides a reactive dialog for exporting folders to a compendium that by default is modal and not draggable.\n */\nexport class TJSFolderExport extends TJSDialog\n{\n   /**\n    * Shows a modal / non-draggable dialog to export a folder to an eligible compendium pack.\n    *\n    * @param document - Folder to export.\n    *\n    * @param [opts] - Additional options.\n    *\n    * @param [opts.pack] - The name of the compendium pack to provide an initial selection value in the dialog.\n    *\n    * @param [opts.merge=true] - Update existing entries in the Compendium pack, matching by name\n    *\n    * @param [opts.keepId=true] - Keep document IDs.\n    *\n    * @param [opts.options] - Rest of options to pass to TJSDialog / SvelteApp.\n    *\n    * @param {TJSDialog.OptionsData} [dialogData] - Optional data to modify dialog.\n    */\n   private constructor(document: fvtt.Folder, { pack, merge, keepId, ...options }:\n    { pack?: string, merge?: boolean, keepId?: boolean } & Partial<SvelteApp.OptionsCore> = {},\n     dialogData: TJSDialog.OptionsData = {})\n   {\n      super({}, options);\n\n      // Get eligible pack destinations\n      // @ts-ignore\n      const packs = globalThis.game.packs.filter((p) => (p.documentName === document.type) &&\n       !p.locked);\n\n      if (!packs.length)\n      {\n         this.managedPromise.resolve(null);\n         // @ts-ignore\n         return globalThis.ui.notifications.warn(localize(\"FOLDER.ExportWarningNone\", { type: document.type }));\n      }\n\n      this.data.replace({\n         modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,\n         draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,\n         focusKeep: true,\n         minimizable: false,\n         ...dialogData,\n         content: {\n            class: TJSFolderExportComp,\n            props: {\n               document,\n               packName: pack,\n               merge,\n               keepId\n            }\n         },\n         title: `${localize('FOLDER.ExportTitle')}: ${document.name}`,\n         buttons: {\n            export: {\n               autoClose: false,\n               icon: 'fas fa-atlas',\n               label: 'FOLDER.ExportTitle',\n               onPress: 'exportData'\n            },\n            cancel: {\n               icon: 'fas fa-times',\n               label: 'Cancel',\n               onPress: (): boolean => false\n            }\n         },\n         default: 'cancel'\n      });\n   }\n\n   /**\n    * Shows a modal / non-draggable dialog to export a folder to an eligible compendium pack.\n    *\n    * @param document - Folder to export.\n    *\n    * @param [opts] - Additional options.\n    *\n    * @param [opts.pack] - The name of the compendium pack to provide an initial selection value in the dialog.\n    *\n    * @param [opts.merge=true] - Update existing entries in the Compendium pack, matching by name\n    *\n    * @param [opts.keepId=true] - Keep document IDs.\n    *\n    * @param [opts.options] - Rest of options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The compendium collection the folder is exported to or a falsy value; either 'false' for cancelling or\n    *          'null' if the user closed the dialog via `<Esc>` or the close header button.\n    */\n   static async show(document: fvtt.Folder, { pack, merge, keepId, ...options }:\n    { pack?: string, merge?: boolean, keepId?: boolean } & Partial<SvelteApp.OptionsCore> = {},\n     dialogData: TJSDialog.OptionsData = {}): Promise<fvtt.CompendiumCollection | false | null>\n   {\n      if (!isFolder(document))\n      {\n         console.warn(`TJSFolderExport - show - warning: 'document' is not a Folder.`);\n         return null;\n      }\n\n      // Get eligible pack destinations if there are none then post a warning.\n      // @ts-ignore\n      const packs = globalThis.game.packs.filter((p) => (p.documentName === document.type) && !p.locked);\n      if (!packs.length)\n      {\n         // @ts-ignore\n         globalThis.ui.notifications.warn(localize('FOLDER.ExportWarningNone', { type: document.type }));\n         return null;\n      }\n\n      return new TJSFolderExport(document, { pack, merge, keepId, ...options }, dialogData).wait();\n   }\n}\n","import { TJSDialog }             from '#runtime/svelte/application';\nimport { isFolder }              from '#runtime/types/fvtt-shim/guard';\nimport { localize }              from '#runtime/util/i18n';\nimport { hasSetter }             from '#runtime/util/object';\n\nimport { TJSFolderRemoveComp }   from '#standard/component/fvtt-internal';\n\nimport type { SvelteApp }        from '#runtime/svelte/application';\n\n/**\n * Provides a reactive dialog for removing a folder that by default is modal and not draggable. An additional set of\n * accessors for the folder assigned are available via the `this.reactive.document`. You may swap out the folder at any\n * time by setting it to a different folder document.\n */\nexport class TJSFolderRemove extends TJSDialog\n{\n   /**\n    * @param document - Folder to remove.\n    *\n    * @param [options] - TJSDialog / SvelteApp options.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    */\n   private constructor(document: fvtt.Document, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {})\n   {\n      super({\n         modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,\n         draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,\n         focusKeep: true,\n         minimizable: false,\n         ...dialogData,\n         content: {\n            class: TJSFolderRemoveComp,\n            props: { document }\n         },\n         title: `${localize('FOLDER.Remove')}: ${document.name}`,\n         buttons: {\n            remove: {\n               icon: 'fas fa-trash',\n               label: 'FOLDER.Remove',\n               onPress: 'removeFolder'\n            },\n            cancel: {\n               icon: 'fas fa-times',\n               label: 'Cancel',\n               onPress: () => false\n            }\n         },\n         default: 'cancel'\n      }, options);\n\n      /**\n       * @member {object} document - Adds accessors to SvelteReactive to get / set the document associated with\n       *                             Document.\n       *\n       * @memberof SvelteReactive#\n       */\n      Object.defineProperty(this.reactive, 'document', {\n         get: (): fvtt.Document => this.svelte?.appShell?.dialogComponent?.document,\n         set: (document: fvtt.Document): void =>\n         {\n            const dialogComponent = this.svelte?.appShell?.dialogComponent;\n            if (hasSetter(dialogComponent, 'document')) { dialogComponent.document = document; }\n         }\n      });\n   }\n\n   /**\n    * Removes a folder, but does not delete / remove subfolders / documents.\n    *\n    * @param document - The folder to remove.\n    *\n    * @param [options] - Options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The removed Folder or a falsy value; either 'false' for cancelling or 'null' if the user closed the\n    *          dialog via `<Esc>` or the close header button.\n    */\n   static async show(document: fvtt.Folder, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {}): Promise<fvtt.Folder | false | null>\n   {\n      if (!isFolder(document))\n      {\n         console.warn(`TJSFolderRemove - show - warning: 'document' is not a Folder.`);\n         return null;\n      }\n\n      return new TJSFolderRemove(document, options, dialogData).wait();\n   }\n}\n","import { TJSDialog }                from '#runtime/svelte/application';\nimport { isFolder }                 from '#runtime/types/fvtt-shim/guard';\nimport { localize }                 from '#runtime/util/i18n';\nimport { hasSetter }                from '#runtime/util/object';\n\nimport { TJSFolderRolltableComp }   from '#standard/component/fvtt-internal';\n\nimport type { SvelteApp }           from '#runtime/svelte/application';\n\n/**\n * Provides a reactive dialog for creating a RollTable from a folder that by default is modal and not draggable. An\n * additional set of accessors for the folder assigned are available via the `this.reactive.document`. You may swap out\n * the folder at any time by setting it to a different folder document.\n */\nexport class TJSFolderRolltable extends TJSDialog\n{\n   /**\n    * @param document - Folder to create roll table from...\n    *\n    * @param [options] - Options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    */\n   private constructor(document: fvtt.Document, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {})\n   {\n      super({\n         modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,\n         draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,\n         focusKeep: true,\n         minimizable: false,\n         ...dialogData,\n         content: {\n            class: TJSFolderRolltableComp,\n            props: { document }\n         },\n         title: `${localize('FOLDER.CreateTable')}: ${document.name}`,\n         buttons: {\n            create: {\n               // @ts-ignore\n               icon: `${CONFIG.RollTable.sidebarIcon}`,\n               label: 'FOLDER.CreateTable',\n               onPress: 'createTable'\n            },\n            cancel: {\n               icon: 'fas fa-times',\n               label: 'Cancel',\n               onPress: (): boolean => false\n            }\n         },\n         default: 'cancel'\n      }, options);\n\n      /**\n       * @member {object} document - Adds accessors to SvelteReactive to get / set the document associated with\n       *                             Document.\n       *\n       * @memberof SvelteReactive#\n       */\n      Object.defineProperty(this.reactive, 'document', {\n         get: (): fvtt.Document => this.svelte?.appShell?.dialogComponent?.document,\n         set: (document: fvtt.Document): void =>\n         {\n            const dialogComponent = this.svelte?.appShell?.dialogComponent;\n            if (hasSetter(dialogComponent, 'document')) { dialogComponent.document = document; }\n         }\n      });\n   }\n\n   /**\n    * Create a RollTable from the contents of the Folder.\n    *\n    * @param document - Folder to create roll table from...\n    *\n    * @param [options] - Options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The newly created RollTable or a falsy value; either 'false' for cancelling or 'null' if the user closed\n    *          the dialog via `<Esc>` or the close header button.\n    */\n   static async show(document: fvtt.Folder, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {}): Promise<fvtt.RollTable | false | null>\n   {\n      if (!isFolder(document))\n      {\n         console.warn(`TJSFolderRolltable - show - warning: 'document' is not a Folder.`);\n         return null;\n      }\n\n      return new TJSFolderRolltable(document, options, dialogData).wait();\n   }\n}\n","import { TJSDocumentCreate }     from './TJSDocumentCreate';\nimport { TJSDocumentDelete }     from './TJSDocumentDelete';\nimport { TJSDocumentImport }     from './TJSDocumentImport';\nimport { TJSDocumentOwnership }  from './TJSDocumentOwnership';\nimport { TJSFolderCreateUpdate } from './TJSFolderCreateUpdate';\nimport { TJSFolderDelete }       from './TJSFolderDelete';\nimport { TJSFolderExport }       from './TJSFolderExport';\nimport { TJSFolderRemove }       from './TJSFolderRemove';\nimport { TJSFolderRolltable }    from './TJSFolderRolltable';\n\nimport type {\n   SvelteApp,\n   TJSDialog }                   from '#runtime/svelte/application';\n\n/**\n * Provides several methods to create documents, folders, and modify them through use of TJSDialog and a modal and\n * non-draggable by default user experience.\n */\nexport class TJSDocumentDialog\n{\n   private constructor() {}\n\n   /**\n    * Change ownership of a document by rendering a dialog to alter the default and all user / player ownership.\n    *\n    * @param document - Document instance to modify.\n    *\n    * @param [options] - Rest of options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The modified document or 'null' if the user closed the dialog via `<Esc>` or the close header button.\n    */\n   static async configureOwnership<D extends fvtt.Document>(document: D, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {}): Promise<D | null>\n   {\n      return TJSDocumentOwnership.show<D>(document, options, dialogData);\n   }\n\n   /**\n    * Create a new Document of the type specified by `documentCls` by rendering a dialog window to provide basic\n    * creation details.\n    *\n    * @param documentCls - Document class to create.\n    *\n    * @param [data] - Document data.\n    *\n    * @param [context={}] - Additional context options or dialog positioning options.\n    *\n    * @param [context.parent] - A parent Document within which these Documents should be embedded.\n    *\n    * @param [context.pack] - A Compendium pack identifier within which the Documents should be modified.\n    *\n    * @param [context.renderSheet] - Render the sheet for the new document.\n    *\n    * @param [context.options] - Rest of options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The newly created document or a falsy value; either 'false' for cancelling or 'null' if the user closed\n    *          the dialog via `<Esc>` or the close header button.\n    */\n   static async documentCreate<D extends fvtt.DocumentConstructor>(documentCls: D, data: object = {}, { parent = null,\n    pack = null, renderSheet = true, ...options }: { parent?: fvtt.Document | null, pack?: string | null,\n     renderSheet?: boolean } & Partial<SvelteApp.OptionsCore> = {}, dialogData: TJSDialog.OptionsData = {}):\n      Promise<InstanceType<D> | false | null>\n   {\n      return TJSDocumentCreate.show<D>(documentCls, data, { parent, pack, renderSheet, ...options }, dialogData);\n   }\n\n   /**\n    * Shows a modal / non-draggable dialog to delete a document.\n    *\n    * @param document - Document to delete.\n    *\n    * @param [options] - TJSDialog / SvelteApp options.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The document if deleted or a falsy value; either 'false' for cancelling or 'null' if the user closed the\n    *          dialog via `<Esc>` or the close header button.\n    */\n   static async documentDelete<D extends fvtt.Document>(document: D, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {}): Promise<D | false | null>\n   {\n      return TJSDocumentDelete.show<D>(document, options, dialogData);\n   }\n\n   /**\n    * Create a new Folder by rendering a dialog to provide basic creation details.\n    *\n    * @param {object} folderData - Initial data with which to populate the creation form.\n    *\n    * @param [options] - Options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The newly created Folder or null if the dialog is closed.\n    */\n   static async folderCreate(folderData: { type: string }, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {}): Promise<fvtt.Folder | null>\n   {\n      return TJSFolderCreateUpdate.showCreate(folderData, options, dialogData);\n   }\n\n   /**\n    * Deletes a folder and does delete subfolders / documents.\n    *\n    * @param document - Folder to delete.\n    *\n    * @param [options] - Options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The deleted Folder or a falsy value; either 'false' for cancelling or 'null' if the user closed the\n    *          dialog via `<Esc>` or the close header button.\n    */\n   static async folderDelete(document: fvtt.Folder, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {}): Promise<fvtt.Folder | null>\n   {\n      return TJSFolderDelete.show(document, options, dialogData);\n   }\n\n   /**\n    * Shows a modal / non-draggable dialog to export a folder to an eligible compendium pack.\n    *\n    * @param document - Folder to export.\n    *\n    * @param [opts] - Additional options.\n    *\n    * @param [opts.pack] - The name of the compendium pack to provide an initial selection value in the dialog.\n    *\n    * @param [opts.merge=true] - Update existing entries in the Compendium pack, matching by name\n    *\n    * @param [opts.keepId=true] - Keep document IDs.\n    *\n    * @param [opts.options] - Rest of options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The compendium collection the folder is exported to or a falsy value; either 'false' for cancelling or\n    *          'null' if the user closed the dialog via `<Esc>` or the close header button.\n    */\n   static async folderExport(document: fvtt.Folder, { pack, merge, keepId, ...options }:\n    { pack?: string, merge?: boolean, keepId?: boolean } & Partial<SvelteApp.OptionsCore> = {},\n     dialogData: TJSDialog.OptionsData = {}): Promise<fvtt.CompendiumCollection | false | null>\n   {\n      return TJSFolderExport.show(document, { pack, merge, keepId, ...options }, dialogData);\n   }\n\n   /**\n    * Removes a folder, but does not delete / remove sub-folders / documents.\n    *\n    * @param document - The folder to remove.\n    *\n    * @param [options] - Options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The removed Folder or a falsy value; either 'false' for cancelling or 'null' if the user closed the\n    *          dialog via `<Esc>` or the close header button.\n    */\n   static async folderRemove(document: fvtt.Folder, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {}): Promise<fvtt.Folder | false | null>\n   {\n      return TJSFolderRemove.show(document, options, dialogData);\n   }\n\n   /**\n    * Create a RollTable from the contents of the Folder.\n    *\n    * @param document - Folder to create roll table from...\n    *\n    * @param [options] - Options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The newly created RollTable or a falsy value; either 'false' for cancelling or 'null' if the user closed\n    *          the dialog via `<Esc>` or the close header button.\n    */\n   static async folderRolltable(document: fvtt.Folder, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {}): Promise<fvtt.RollTable | false | null>\n   {\n      return TJSFolderRolltable.show(document, options, dialogData);\n   }\n\n   /**\n    * Updates an existing Folder by rendering a dialog window with basic details.\n    *\n    * @param document - The folder to edit.\n    *\n    * @param [options] - Options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The modified Folder or null if the dialog is closed.\n    */\n   static async folderUpdate(document: fvtt.Folder, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {}): Promise<fvtt.Folder | null>\n   {\n      return TJSFolderCreateUpdate.showUpdate(document, options, dialogData);\n   }\n\n   /**\n    * Render an import dialog for updating the data related to this Document through an exported JSON file\n    *\n    * @param document - The document to import JSON to...\n    *\n    * @param [options] - Options to pass to TJSDialog / SvelteApp.\n    *\n    * @param [dialogData] - Optional data to modify dialog.\n    *\n    * @returns The document after import completes or a falsy value; either 'false' for cancelling or 'null' if the\n    *          user closed the dialog via `<Esc>` or the close header button.\n    */\n   static async importFromJSON<D extends fvtt.Document>(document: D, options: SvelteApp.OptionsCore = {},\n    dialogData: TJSDialog.OptionsData = {}): Promise<D | false | null>\n   {\n      return TJSDocumentImport.show<D>(document, options, dialogData);\n   }\n}\n"],"names":[],"mappings":"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"}