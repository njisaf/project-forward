import { TJSDialog } from '@typhonjs-fvtt/runtime/svelte/application';
import { isDocumentClass, isFolderClass, isDocument, isFolder } from '@typhonjs-fvtt/runtime/types/fvtt-shim/guard';
import { localize } from '@typhonjs-fvtt/runtime/util/i18n';
import { TJSDocumentCreateComp, TJSDocumentDeleteComp, TJSDocumentImportComp, TJSDocumentOwnershipComp, TJSFolderCreateUpdateComp, TJSFolderDeleteComp, TJSFolderExportComp, TJSFolderRemoveComp, TJSFolderRolltableComp } from '@typhonjs-fvtt/standard/component/fvtt-internal';
import { hasSetter } from '@typhonjs-fvtt/runtime/util/object';

/**
 * Provides a dialog for creating documents that by default is modal and not draggable.
 */
class TJSDocumentCreate extends TJSDialog {
    /**
     * Create a new Document of the type specified by `documentCls` by rendering a dialog window to provide basic
     * creation details.
     *
     * @param documentCls - Document class to create.
     *
     * @param [data] - Document data.
     *
     * @param [context] - Additional context options or dialog positioning options.
     *
     * @param [context.parent] - A parent Document within which these Documents should be embedded.
     *
     * @param [context.pack] - A Compendium pack identifier within which the Documents should be modified.
     *
     * @param [context.renderSheet] - Render the sheet for the new document.
     *
     * @param [context.options] - Rest of options to pass to TJSDialog / Application.
     *
     * @param [dialogData] - Optional data to modify dialog.
     */
    constructor(documentCls, data = {}, { parent = null, pack = null, renderSheet = true, ...options } = {}, dialogData = {}) {
        super({
            modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,
            draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,
            focusFirst: true,
            focusKeep: true,
            minimizable: false,
            ...dialogData,
            content: {
                class: TJSDocumentCreateComp,
                props: {
                    documentCls,
                    data,
                    parent,
                    pack,
                    renderSheet
                }
            },
            title: localize('DOCUMENT.Create', { type: localize(documentCls?.metadata?.label) }),
            buttons: {
                create: {
                    autoClose: false,
                    icon: 'fas fa-check',
                    label: localize('DOCUMENT.Create', { type: localize(documentCls?.metadata?.label) }),
                    onPress: 'requestSubmit'
                }
            },
            default: 'create'
        }, { width: 320, ...options });
    }
    /**
     * Create a new Document of the type specified by `documentCls` by rendering a dialog window to provide basic
     * creation details.
     *
     * @param documentCls - Document class to create.
     *
     * @param [data] - Document data.
     *
     * @param [context={}] - Additional context options or dialog positioning options.
     *
     * @param [context.parent] - A parent Document within which these Documents should be embedded.
     *
     * @param [context.pack] - A Compendium pack identifier within which the Documents should be modified.
     *
     * @param [context.renderSheet] - Render the sheet for the new document.
     *
     * @param [context.options] - Rest of options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The newly created document or a falsy value; either 'false' for
     *          cancelling or 'null' if the user closed the dialog via `<Esc>` or the close header button.
     */
    static async show(documentCls, data = {}, { parent = null, pack = null, renderSheet = true, ...options } = {}, dialogData = {}) {
        if (!isDocumentClass(documentCls)) {
            console.warn(`TJSDocumentCreate - show - warning: 'documentCls' is not a Document.`);
            return null;
        }
        if (isFolderClass(documentCls)) {
            console.warn(`TJSDocumentCreate - show - warning: 'documentCls' is a Folder.`);
            return null;
        }
        return new TJSDocumentCreate(documentCls, data, { parent, pack, renderSheet, ...options }, dialogData).wait();
    }
}

/**
 * Provides a reactive dialog for deleting documents that by default is modal and not draggable. An additional set of
 * accessors for the document assigned are available via the `this.reactive.document`. You may swap out the document at
 * any time by setting it to a different document.
 */
class TJSDocumentDelete extends TJSDialog {
    /**
     * @param document - Document to delete.
     *
     * @param [options] - TJSDialog / SvelteApp options.
     *
     * @param [dialogData] - Optional data to modify dialog.
     */
    constructor(document, options = {}, dialogData = {}) {
        super({
            modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,
            draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,
            focusKeep: true,
            minimizable: false,
            ...dialogData,
            content: {
                class: TJSDocumentDeleteComp,
                props: { document }
            },
            title: `${localize('DOCUMENT.Delete', { type: localize(document.constructor.metadata.label) })}: ${document.name}`,
            buttons: {
                delete: {
                    icon: 'fas fa-trash',
                    label: localize('DOCUMENT.Delete', { type: localize(document.constructor.metadata.label) }),
                    onPress: 'deleteDocument'
                },
                cancel: {
                    icon: 'fas fa-times',
                    label: 'Cancel',
                    onPress: () => false
                }
            },
            default: 'cancel'
        }, options);
        /**
         * @member {object} document - Adds accessors to SvelteReactive to get / set the document associated with
         *                             Document.
         *
         * @memberof SvelteReactive#
         */
        Object.defineProperty(this.reactive, 'document', {
            get: () => this.svelte?.appShell?.dialogComponent?.document,
            set: (document) => {
                const dialogComponent = this.svelte?.appShell?.dialogComponent;
                if (hasSetter(dialogComponent, 'document')) {
                    dialogComponent.document = document;
                }
            }
        });
    }
    /**
     * Shows a modal / non-draggable dialog to delete a document.
     *
     * @param document - Document to delete.
     *
     * @param [options] - TJSDialog / SvelteApp options.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The document if deleted or a falsy value; either 'false' for cancelling or 'null' if the user closed the
     *          dialog via `<Esc>` or the close header button.
     */
    static async show(document, options = {}, dialogData = {}) {
        if (!isDocument(document)) {
            console.warn(`TJSDocumentDelete - show - warning: 'document' is not a Document.`);
            return null;
        }
        if (isFolder(document)) {
            console.warn(`TJSDocumentDelete - show - warning: 'document' is a Folder.`);
            return null;
        }
        return new TJSDocumentDelete(document, options, dialogData).wait();
    }
}

/**
 * Provides a reactive dialog for importing documents that by default is modal and not draggable. An additional set of
 * accessors for the document assigned are available via the `this.reactive.document`. You may swap out the document at
 * any time by setting it to a different document.
 */
class TJSDocumentImport extends TJSDialog {
    /**
     * Render an import dialog for updating the data related to this Document through an exported JSON file
     *
     * @param document - The document to import JSON to...
     *
     * @param [options] - Options to pass to TJSDialog /
     *        Application.
     *
     * @param [dialogData] - Optional data to modify dialog.
     */
    constructor(document, options = {}, dialogData = {}) {
        super({
            modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,
            draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,
            focusKeep: true,
            minimizable: false,
            ...dialogData,
            title: `${localize('DOCUMENT.ImportData')}: ${document.name}`,
            content: {
                class: TJSDocumentImportComp,
                props: { document }
            },
            buttons: {
                import: {
                    autoClose: false, // Don't automatically close on button onclick.
                    icon: 'fas fa-file-import',
                    label: 'Import',
                    onPress: 'requestSubmit'
                },
                cancel: {
                    icon: 'fas fa-times',
                    label: 'Cancel',
                    onPress: () => false
                }
            },
            default: 'cancel'
        }, { width: 400, ...options });
        /**
         * @member {object} document - Adds accessors to SvelteReactive to get / set the document associated with
         *                             Document.
         *
         * @memberof SvelteReactive#
         */
        Object.defineProperty(this.reactive, 'document', {
            get: () => this.svelte?.appShell?.dialogComponent?.document,
            set: (document) => {
                const dialogComponent = this.svelte?.appShell?.dialogComponent;
                if (hasSetter(dialogComponent, 'document')) {
                    dialogComponent.document = document;
                }
            }
        });
    }
    /**
     * Render an import dialog for updating the data related to this Document through an exported JSON file
     *
     * @param document - The document to import JSON to...
     *
     * @param [options] - Options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The document after import completes or a falsy value; either 'false' for cancelling or 'null' if the
     *          user closed the dialog via `<Esc>` or the close header button.
     */
    static async show(document, options = {}, dialogData = {}) {
        if (!isDocument(document)) {
            console.warn(`TJSDocumentImport - show - warning: 'document' is not a Document.`);
            return null;
        }
        if (isFolder(document)) {
            console.warn(`TJSDocumentImport - show - warning: 'document' is a Folder; unsupported operation'.`);
            return null;
        }
        return new TJSDocumentImport(document, options, dialogData).wait();
    }
}

/**
 * Provides a reactive dialog for permission control that by default is modal and not draggable. An additional set of
 * accessors for the document assigned are available via the `this.reactive.document`. You may swap out the document at
 * any time by setting it to a different document.
 */
class TJSDocumentOwnership extends TJSDialog {
    /**
     * @param document - Document to delete.
     *
     * @param [options] - TJSDialog / SvelteApp options.
     *
     * @param [dialogData] - Optional data to modify dialog.
     */
    constructor(document, options = {}, dialogData = {}) {
        super({
            modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,
            draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,
            focusFirst: true,
            focusKeep: true,
            minimizable: false,
            ...dialogData,
            content: {
                class: TJSDocumentOwnershipComp,
                props: { document }
            },
            title: `${localize('OWNERSHIP.Title')}: ${document.name}`,
            buttons: {
                save: {
                    autoClose: false,
                    icon: 'far fa-save',
                    label: 'Save Changes',
                    onPress: 'requestSubmit'
                }
            },
            default: 'save'
        }, options);
        /**
         * @member {object} document - Adds accessors to SvelteReactive to get / set the document associated with
         *                             Document.
         *
         * @memberof SvelteReactive#
         */
        Object.defineProperty(this.reactive, 'document', {
            get: () => this.svelte?.appShell?.dialogComponent?.document,
            set: (document) => {
                const dialogComponent = this.svelte?.appShell?.dialogComponent;
                if (hasSetter(dialogComponent, 'document')) {
                    dialogComponent.document = document;
                }
            }
        });
    }
    /**
     * Change permissions of a document by rendering a dialog to alter the default and all user / player permissions.
     *
     * @param document - Document instance to modify.
     *
     * @param [options] - Options to pass to TJSDialog / Application.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The modified document or 'null' if the user closed the dialog via `<Esc>` or the close header button.
     */
    static async show(document, options = {}, dialogData = {}) {
        if (!isDocument(document)) {
            console.warn(`TJSDocumentOwnership - show - warning: 'document' is not a Document.`);
            return null;
        }
        return new TJSDocumentOwnership(document, options, dialogData).wait();
    }
}

/**
 * Provides a reactive dialog for modifying folders that by default is modal and not draggable. An additional set of
 * accessors for the folder assigned are available via the `this.reactive.document`. You may swap out the folder at
 * any time by setting it to a different folder document.
 */
class TJSFolderCreateUpdate extends TJSDialog {
    /**
     * @param document - Document to delete.
     *
     * @param [options] - TJSDialog / SvelteApp options.
     *
     * @param {TJSDialog.OptionsData} [dialogData] - Optional data to modify dialog.
     */
    constructor(document, options = {}, dialogData = {}) {
        super({
            modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,
            draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,
            focusFirst: true,
            focusKeep: true,
            minimizable: false,
            ...dialogData,
            content: {
                class: TJSFolderCreateUpdateComp,
                props: { document }
            },
            title: document.id ? `${localize('FOLDER.Update')}: ${document.name}` : localize('FOLDER.Create'),
            buttons: {
                submit: {
                    autoClose: false,
                    icon: 'fas fa-check',
                    label: localize(document?.id ? 'FOLDER.Update' : 'FOLDER.Create'),
                    onPress: 'requestSubmit'
                }
            },
            default: 'submit'
        }, options);
        /**
         * @member {object} document - Adds accessors to SvelteReactive to get / set the document associated with
         *                             Document.
         *
         * @memberof SvelteReactive#
         */
        Object.defineProperty(this.reactive, 'document', {
            get: () => this.svelte?.appShell?.dialogComponent?.document,
            set: (document) => {
                const dialogComponent = this.svelte?.appShell?.dialogComponent;
                if (hasSetter(dialogComponent, 'document')) {
                    dialogComponent.document = document;
                }
            }
        });
    }
    /**
     * Create a new Folder by rendering a dialog to provide basic creation details.
     *
     * @param {object} folderData - Initial data with which to populate the creation form.
     *
     * @param [options] - Options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The newly created Folder or null if the dialog is closed.
     */
    static async showCreate(folderData, options = {}, dialogData = {}) {
        // @ts-ignore
        if (!(folderData?.type in globalThis.CONFIG)) {
            console.warn(`TJSFolderCreateUpdate - showCreate - warning: 'type' attribute of folderData is not a Document.`);
            return null;
        }
        // @ts-ignore
        const label = localize(Folder.metadata.label);
        // @ts-ignore
        const data = globalThis.foundry.utils.mergeObject({
            name: localize('DOCUMENT.New', { type: label }),
            sorting: 'a',
        }, folderData);
        // @ts-ignore
        const document = new Folder(data);
        return new TJSFolderCreateUpdate(document, options, dialogData).wait();
    }
    /**
     * Updates an existing Folder by rendering a dialog window with basic details.
     *
     * @param document - The folder to edit.
     *
     * @param [options] - Options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The modified Folder or null if the dialog is closed.
     */
    static async showUpdate(document, options = {}, dialogData = {}) {
        if (!isFolder(document)) {
            console.warn(`TJSFolderCreateUpdate - show - warning: 'document' is not a Folder.`);
            return null;
        }
        return new TJSFolderCreateUpdate(document, options, dialogData).wait();
    }
}

/**
 * Provides a reactive dialog for deleting a folder that by default is modal and not draggable. An additional set of
 * accessors for the folder assigned are available via the `this.reactive.document`. You may swap out the folder at any
 * time by setting it to a different folder document.
 */
class TJSFolderDelete extends TJSDialog {
    /**
     * Deletes a folder and does delete sub-folders / documents.
     *
     * @param document - Document to delete.
     *
     * @param [options] - TJSDialog / SvelteApp options.
     *
     * @param [dialogData] - Optional data to modify dialog.
     */
    constructor(document, options = {}, dialogData = {}) {
        super({
            modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,
            draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,
            focusKeep: true,
            minimizable: false,
            ...dialogData,
            content: {
                class: TJSFolderDeleteComp,
                props: { document }
            },
            title: `${localize('FOLDER.Delete')}: ${document.name}`,
            buttons: {
                delete: {
                    icon: 'fas fa-dumpster',
                    label: 'FOLDER.Delete',
                    onPress: 'deleteFolder'
                },
                cancel: {
                    icon: 'fas fa-times',
                    label: 'Cancel',
                    onPress: () => false
                }
            },
            default: 'cancel'
        }, options);
        /**
         * @member {object} document - Adds accessors to SvelteReactive to get / set the document associated with
         *                             Document.
         *
         * @memberof SvelteReactive#
         */
        Object.defineProperty(this.reactive, 'document', {
            get: () => this.svelte?.appShell?.dialogComponent?.document,
            set: (document) => {
                const dialogComponent = this.svelte?.appShell?.dialogComponent;
                if (hasSetter(dialogComponent, 'document')) {
                    dialogComponent.document = document;
                }
            }
        });
    }
    /**
     * Deletes a folder and does delete sub-folders / documents.
     *
     * @param document - Folder to delete.
     *
     * @param [options] - Options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The deleted Folder or a falsy value; either 'false' for cancelling or 'null' if the user closed the
     *          dialog via `<Esc>` or the close header button.
     */
    static async show(document, options = {}, dialogData = {}) {
        if (!isFolder(document)) {
            console.warn(`TJSFolderDelete - show - warning: 'document' is not a Folder.`);
            return null;
        }
        return new TJSFolderDelete(document, options, dialogData).wait();
    }
}

/**
 * Provides a reactive dialog for exporting folders to a compendium that by default is modal and not draggable.
 */
class TJSFolderExport extends TJSDialog {
    /**
     * Shows a modal / non-draggable dialog to export a folder to an eligible compendium pack.
     *
     * @param document - Folder to export.
     *
     * @param [opts] - Additional options.
     *
     * @param [opts.pack] - The name of the compendium pack to provide an initial selection value in the dialog.
     *
     * @param [opts.merge=true] - Update existing entries in the Compendium pack, matching by name
     *
     * @param [opts.keepId=true] - Keep document IDs.
     *
     * @param [opts.options] - Rest of options to pass to TJSDialog / SvelteApp.
     *
     * @param {TJSDialog.OptionsData} [dialogData] - Optional data to modify dialog.
     */
    constructor(document, { pack, merge, keepId, ...options } = {}, dialogData = {}) {
        super({}, options);
        // Get eligible pack destinations
        // @ts-ignore
        const packs = globalThis.game.packs.filter((p) => (p.documentName === document.type) &&
            !p.locked);
        if (!packs.length) {
            this.managedPromise.resolve(null);
            // @ts-ignore
            return globalThis.ui.notifications.warn(localize("FOLDER.ExportWarningNone", { type: document.type }));
        }
        this.data.replace({
            modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,
            draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,
            focusKeep: true,
            minimizable: false,
            ...dialogData,
            content: {
                class: TJSFolderExportComp,
                props: {
                    document,
                    packName: pack,
                    merge,
                    keepId
                }
            },
            title: `${localize('FOLDER.ExportTitle')}: ${document.name}`,
            buttons: {
                export: {
                    autoClose: false,
                    icon: 'fas fa-atlas',
                    label: 'FOLDER.ExportTitle',
                    onPress: 'exportData'
                },
                cancel: {
                    icon: 'fas fa-times',
                    label: 'Cancel',
                    onPress: () => false
                }
            },
            default: 'cancel'
        });
    }
    /**
     * Shows a modal / non-draggable dialog to export a folder to an eligible compendium pack.
     *
     * @param document - Folder to export.
     *
     * @param [opts] - Additional options.
     *
     * @param [opts.pack] - The name of the compendium pack to provide an initial selection value in the dialog.
     *
     * @param [opts.merge=true] - Update existing entries in the Compendium pack, matching by name
     *
     * @param [opts.keepId=true] - Keep document IDs.
     *
     * @param [opts.options] - Rest of options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The compendium collection the folder is exported to or a falsy value; either 'false' for cancelling or
     *          'null' if the user closed the dialog via `<Esc>` or the close header button.
     */
    static async show(document, { pack, merge, keepId, ...options } = {}, dialogData = {}) {
        if (!isFolder(document)) {
            console.warn(`TJSFolderExport - show - warning: 'document' is not a Folder.`);
            return null;
        }
        // Get eligible pack destinations if there are none then post a warning.
        // @ts-ignore
        const packs = globalThis.game.packs.filter((p) => (p.documentName === document.type) && !p.locked);
        if (!packs.length) {
            // @ts-ignore
            globalThis.ui.notifications.warn(localize('FOLDER.ExportWarningNone', { type: document.type }));
            return null;
        }
        return new TJSFolderExport(document, { pack, merge, keepId, ...options }, dialogData).wait();
    }
}

/**
 * Provides a reactive dialog for removing a folder that by default is modal and not draggable. An additional set of
 * accessors for the folder assigned are available via the `this.reactive.document`. You may swap out the folder at any
 * time by setting it to a different folder document.
 */
class TJSFolderRemove extends TJSDialog {
    /**
     * @param document - Folder to remove.
     *
     * @param [options] - TJSDialog / SvelteApp options.
     *
     * @param [dialogData] - Optional data to modify dialog.
     */
    constructor(document, options = {}, dialogData = {}) {
        super({
            modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,
            draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,
            focusKeep: true,
            minimizable: false,
            ...dialogData,
            content: {
                class: TJSFolderRemoveComp,
                props: { document }
            },
            title: `${localize('FOLDER.Remove')}: ${document.name}`,
            buttons: {
                remove: {
                    icon: 'fas fa-trash',
                    label: 'FOLDER.Remove',
                    onPress: 'removeFolder'
                },
                cancel: {
                    icon: 'fas fa-times',
                    label: 'Cancel',
                    onPress: () => false
                }
            },
            default: 'cancel'
        }, options);
        /**
         * @member {object} document - Adds accessors to SvelteReactive to get / set the document associated with
         *                             Document.
         *
         * @memberof SvelteReactive#
         */
        Object.defineProperty(this.reactive, 'document', {
            get: () => this.svelte?.appShell?.dialogComponent?.document,
            set: (document) => {
                const dialogComponent = this.svelte?.appShell?.dialogComponent;
                if (hasSetter(dialogComponent, 'document')) {
                    dialogComponent.document = document;
                }
            }
        });
    }
    /**
     * Removes a folder, but does not delete / remove subfolders / documents.
     *
     * @param document - The folder to remove.
     *
     * @param [options] - Options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The removed Folder or a falsy value; either 'false' for cancelling or 'null' if the user closed the
     *          dialog via `<Esc>` or the close header button.
     */
    static async show(document, options = {}, dialogData = {}) {
        if (!isFolder(document)) {
            console.warn(`TJSFolderRemove - show - warning: 'document' is not a Folder.`);
            return null;
        }
        return new TJSFolderRemove(document, options, dialogData).wait();
    }
}

/**
 * Provides a reactive dialog for creating a RollTable from a folder that by default is modal and not draggable. An
 * additional set of accessors for the folder assigned are available via the `this.reactive.document`. You may swap out
 * the folder at any time by setting it to a different folder document.
 */
class TJSFolderRolltable extends TJSDialog {
    /**
     * @param document - Folder to create roll table from...
     *
     * @param [options] - Options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     */
    constructor(document, options = {}, dialogData = {}) {
        super({
            modal: typeof dialogData?.modal === 'boolean' ? dialogData.modal : true,
            draggable: typeof options?.draggable === 'boolean' ? options.draggable : false,
            focusKeep: true,
            minimizable: false,
            ...dialogData,
            content: {
                class: TJSFolderRolltableComp,
                props: { document }
            },
            title: `${localize('FOLDER.CreateTable')}: ${document.name}`,
            buttons: {
                create: {
                    // @ts-ignore
                    icon: `${CONFIG.RollTable.sidebarIcon}`,
                    label: 'FOLDER.CreateTable',
                    onPress: 'createTable'
                },
                cancel: {
                    icon: 'fas fa-times',
                    label: 'Cancel',
                    onPress: () => false
                }
            },
            default: 'cancel'
        }, options);
        /**
         * @member {object} document - Adds accessors to SvelteReactive to get / set the document associated with
         *                             Document.
         *
         * @memberof SvelteReactive#
         */
        Object.defineProperty(this.reactive, 'document', {
            get: () => this.svelte?.appShell?.dialogComponent?.document,
            set: (document) => {
                const dialogComponent = this.svelte?.appShell?.dialogComponent;
                if (hasSetter(dialogComponent, 'document')) {
                    dialogComponent.document = document;
                }
            }
        });
    }
    /**
     * Create a RollTable from the contents of the Folder.
     *
     * @param document - Folder to create roll table from...
     *
     * @param [options] - Options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The newly created RollTable or a falsy value; either 'false' for cancelling or 'null' if the user closed
     *          the dialog via `<Esc>` or the close header button.
     */
    static async show(document, options = {}, dialogData = {}) {
        if (!isFolder(document)) {
            console.warn(`TJSFolderRolltable - show - warning: 'document' is not a Folder.`);
            return null;
        }
        return new TJSFolderRolltable(document, options, dialogData).wait();
    }
}

/**
 * Provides several methods to create documents, folders, and modify them through use of TJSDialog and a modal and
 * non-draggable by default user experience.
 */
class TJSDocumentDialog {
    constructor() { }
    /**
     * Change ownership of a document by rendering a dialog to alter the default and all user / player ownership.
     *
     * @param document - Document instance to modify.
     *
     * @param [options] - Rest of options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The modified document or 'null' if the user closed the dialog via `<Esc>` or the close header button.
     */
    static async configureOwnership(document, options = {}, dialogData = {}) {
        return TJSDocumentOwnership.show(document, options, dialogData);
    }
    /**
     * Create a new Document of the type specified by `documentCls` by rendering a dialog window to provide basic
     * creation details.
     *
     * @param documentCls - Document class to create.
     *
     * @param [data] - Document data.
     *
     * @param [context={}] - Additional context options or dialog positioning options.
     *
     * @param [context.parent] - A parent Document within which these Documents should be embedded.
     *
     * @param [context.pack] - A Compendium pack identifier within which the Documents should be modified.
     *
     * @param [context.renderSheet] - Render the sheet for the new document.
     *
     * @param [context.options] - Rest of options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The newly created document or a falsy value; either 'false' for cancelling or 'null' if the user closed
     *          the dialog via `<Esc>` or the close header button.
     */
    static async documentCreate(documentCls, data = {}, { parent = null, pack = null, renderSheet = true, ...options } = {}, dialogData = {}) {
        return TJSDocumentCreate.show(documentCls, data, { parent, pack, renderSheet, ...options }, dialogData);
    }
    /**
     * Shows a modal / non-draggable dialog to delete a document.
     *
     * @param document - Document to delete.
     *
     * @param [options] - TJSDialog / SvelteApp options.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The document if deleted or a falsy value; either 'false' for cancelling or 'null' if the user closed the
     *          dialog via `<Esc>` or the close header button.
     */
    static async documentDelete(document, options = {}, dialogData = {}) {
        return TJSDocumentDelete.show(document, options, dialogData);
    }
    /**
     * Create a new Folder by rendering a dialog to provide basic creation details.
     *
     * @param {object} folderData - Initial data with which to populate the creation form.
     *
     * @param [options] - Options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The newly created Folder or null if the dialog is closed.
     */
    static async folderCreate(folderData, options = {}, dialogData = {}) {
        return TJSFolderCreateUpdate.showCreate(folderData, options, dialogData);
    }
    /**
     * Deletes a folder and does delete subfolders / documents.
     *
     * @param document - Folder to delete.
     *
     * @param [options] - Options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The deleted Folder or a falsy value; either 'false' for cancelling or 'null' if the user closed the
     *          dialog via `<Esc>` or the close header button.
     */
    static async folderDelete(document, options = {}, dialogData = {}) {
        return TJSFolderDelete.show(document, options, dialogData);
    }
    /**
     * Shows a modal / non-draggable dialog to export a folder to an eligible compendium pack.
     *
     * @param document - Folder to export.
     *
     * @param [opts] - Additional options.
     *
     * @param [opts.pack] - The name of the compendium pack to provide an initial selection value in the dialog.
     *
     * @param [opts.merge=true] - Update existing entries in the Compendium pack, matching by name
     *
     * @param [opts.keepId=true] - Keep document IDs.
     *
     * @param [opts.options] - Rest of options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The compendium collection the folder is exported to or a falsy value; either 'false' for cancelling or
     *          'null' if the user closed the dialog via `<Esc>` or the close header button.
     */
    static async folderExport(document, { pack, merge, keepId, ...options } = {}, dialogData = {}) {
        return TJSFolderExport.show(document, { pack, merge, keepId, ...options }, dialogData);
    }
    /**
     * Removes a folder, but does not delete / remove sub-folders / documents.
     *
     * @param document - The folder to remove.
     *
     * @param [options] - Options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The removed Folder or a falsy value; either 'false' for cancelling or 'null' if the user closed the
     *          dialog via `<Esc>` or the close header button.
     */
    static async folderRemove(document, options = {}, dialogData = {}) {
        return TJSFolderRemove.show(document, options, dialogData);
    }
    /**
     * Create a RollTable from the contents of the Folder.
     *
     * @param document - Folder to create roll table from...
     *
     * @param [options] - Options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The newly created RollTable or a falsy value; either 'false' for cancelling or 'null' if the user closed
     *          the dialog via `<Esc>` or the close header button.
     */
    static async folderRolltable(document, options = {}, dialogData = {}) {
        return TJSFolderRolltable.show(document, options, dialogData);
    }
    /**
     * Updates an existing Folder by rendering a dialog window with basic details.
     *
     * @param document - The folder to edit.
     *
     * @param [options] - Options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The modified Folder or null if the dialog is closed.
     */
    static async folderUpdate(document, options = {}, dialogData = {}) {
        return TJSFolderCreateUpdate.showUpdate(document, options, dialogData);
    }
    /**
     * Render an import dialog for updating the data related to this Document through an exported JSON file
     *
     * @param document - The document to import JSON to...
     *
     * @param [options] - Options to pass to TJSDialog / SvelteApp.
     *
     * @param [dialogData] - Optional data to modify dialog.
     *
     * @returns The document after import completes or a falsy value; either 'false' for cancelling or 'null' if the
     *          user closed the dialog via `<Esc>` or the close header button.
     */
    static async importFromJSON(document, options = {}, dialogData = {}) {
        return TJSDocumentImport.show(document, options, dialogData);
    }
}

export { TJSDocumentCreate, TJSDocumentDelete, TJSDocumentDialog, TJSDocumentImport, TJSDocumentOwnership, TJSFolderCreateUpdate, TJSFolderDelete, TJSFolderExport, TJSFolderRemove, TJSFolderRolltable };
//# sourceMappingURL=index.js.map
