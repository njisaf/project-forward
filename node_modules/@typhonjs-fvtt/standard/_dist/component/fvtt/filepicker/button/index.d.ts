import * as _typhonjs_fvtt_standard_application_control_filepicker from '@typhonjs-fvtt/standard/application/control/filepicker';
import { SvelteComponent } from 'svelte';

/**
 * Provides a pre-configured icon button interfacing w/ the Foundry file picker.
 *
 * Please see {@link FVTTFilePickerBrowseOptions} for the `pickerOptions` prop.
 * Please see {@link TJSButton} for the button component / CSS variable support.
 *
 * This component provides one way binding by default. You may explicitly bind to the `urlString` prop to create a
 * two-way binding.
 *
 */
declare class TjsFileButton extends SvelteComponent<TjsFileButton.Props, TjsFileButton.Events, TjsFileButton.Slots> {}

/** Event / Prop / Slot type aliases for {@link TjsFileButton | associated component}. */
declare namespace TjsFileButton {
  /** Props type alias for {@link TjsFileButton | associated component}. */
  export type Props = {
    [x: string]: any;
    /** @type {object} */
    button?: object;
    /** @type {import('@typhonjs-fvtt/standard/application/control/filepicker').FVTTFilePickerBrowseOptions} */
    pickerOptions?: _typhonjs_fvtt_standard_application_control_filepicker.FVTTFilePickerBrowseOptions;
    urlString?: string;
  };
  /** Events type alias for {@link TjsFileButton | associated component}. */
  export type Events = { 'filepicker:urlString': CustomEvent<any> } & { [evt: string]: CustomEvent<any> };
  /** Slots type alias for {@link TjsFileButton | associated component}. */
  export type Slots = {};
}

/**
 * Provides a pre-configured icon button interfacing w/ the Foundry file picker.
 *
 * Please see {@link FVTTFilePickerBrowseOptions} for the `pickerOptions` prop.
 * Please see {@link TJSIconButton} for the button component / CSS variable support.
 *
 * This component provides one way binding by default. You may explicitly bind to the `urlString` prop to create a
 * two-way binding.
 *
 */
declare class TjsFileIconButton extends SvelteComponent<
  TjsFileIconButton.Props,
  TjsFileIconButton.Events,
  TjsFileIconButton.Slots
> {}

/** Event / Prop / Slot type aliases for {@link TjsFileIconButton | associated component}. */
declare namespace TjsFileIconButton {
  /** Props type alias for {@link TjsFileIconButton | associated component}. */
  export type Props = {
    [x: string]: any;
    /** @type {object} */
    button?: object;
    /** @type {import('@typhonjs-fvtt/standard/application/control/filepicker').FVTTFilePickerBrowseOptions} */
    pickerOptions?: _typhonjs_fvtt_standard_application_control_filepicker.FVTTFilePickerBrowseOptions;
    urlString?: string;
  };
  /** Events type alias for {@link TjsFileIconButton | associated component}. */
  export type Events = { 'filepicker:urlString': CustomEvent<any> } & { [evt: string]: CustomEvent<any> };
  /** Slots type alias for {@link TjsFileIconButton | associated component}. */
  export type Slots = {};
}

/**
 * Provides a pre-configured slotted button interfacing w/ the Foundry file picker. You may assign a child component
 * that obtains the `urlString` store.
 *
 * Please see {@link FVTTFilePickerBrowseOptions} for the `pickerOptions` prop.
 * Please see {@link TJSSlotButton} for the button component / CSS variable support.
 *
 *
 * This component provides one way binding by default. You may explicitly bind to the `urlString` prop to create a
 * two-way binding.
 *
 */
declare class TjsFileSlotButton extends SvelteComponent<
  TjsFileSlotButton.Props,
  TjsFileSlotButton.Events,
  TjsFileSlotButton.Slots
> {}

/** Event / Prop / Slot type aliases for {@link TjsFileSlotButton | associated component}. */
declare namespace TjsFileSlotButton {
  /** Props type alias for {@link TjsFileSlotButton | associated component}. */
  export type Props = {
    [x: string]: any;
    /** @type {object} */
    button?: object;
    /** @type {import('@typhonjs-fvtt/standard/application/control/filepicker').FVTTFilePickerBrowseOptions} */
    pickerOptions?: _typhonjs_fvtt_standard_application_control_filepicker.FVTTFilePickerBrowseOptions;
    urlString?: string;
  };
  /** Events type alias for {@link TjsFileSlotButton | associated component}. */
  export type Events = { 'filepicker:urlString': CustomEvent<any> } & { [evt: string]: CustomEvent<any> };
  /** Slots type alias for {@link TjsFileSlotButton | associated component}. */
  export type Slots = { default: {} };
}

export {
  TjsFileButton as TJSFileButton,
  TjsFileIconButton as TJSFileIconButton,
  TjsFileSlotButton as TJSFileSlotButton,
};
