/**
 * This package contains internal component resources for TRL. They are exposed through other API aspects and should
 * not be directly accessed.
 *
 * @packageDocumentation
 *
 * @hidden
 */

import { SvelteComponent } from 'svelte';

declare class TjsDocumentCreateComp extends SvelteComponent<
  TjsDocumentCreateComp.Props,
  TjsDocumentCreateComp.Events,
  TjsDocumentCreateComp.Slots
> {
  /** Getter for {@link TjsDocumentCreateComp.Props.requestSubmit | requestSubmit} prop. */
  get requestSubmit(): () => void;

  /** Setter for {@link TjsDocumentCreateComp.Props.documentCls | documentCls} prop. */
  set documentCls(_: any);

  /** Getter for {@link TjsDocumentCreateComp.Props.documentCls | documentCls} prop. */
  get documentCls(): any;

  /** Setter for {@link TjsDocumentCreateComp.Props.data | data} prop. */
  set data(_: {});

  /** Getter for {@link TjsDocumentCreateComp.Props.data | data} prop. */
  get data(): {};

  /** Setter for {@link TjsDocumentCreateComp.Props.parent | parent} prop. */
  set parent(_: any);

  /** Getter for {@link TjsDocumentCreateComp.Props.parent | parent} prop. */
  get parent(): any;

  /** Setter for {@link TjsDocumentCreateComp.Props.pack | pack} prop. */
  set pack(_: any);

  /** Getter for {@link TjsDocumentCreateComp.Props.pack | pack} prop. */
  get pack(): any;

  /** Setter for {@link TjsDocumentCreateComp.Props.renderSheet | renderSheet} prop. */
  set renderSheet(_: boolean);

  /** Getter for {@link TjsDocumentCreateComp.Props.renderSheet | renderSheet} prop. */
  get renderSheet(): boolean;
  /**accessor*/
  set undefined(_: any);
  get undefined(): any;
}

/** Event / Prop / Slot type aliases for {@link TjsDocumentCreateComp | associated component}. */
declare namespace TjsDocumentCreateComp {
  /** Props type alias for {@link TjsDocumentCreateComp | associated component}. */
  export type Props = {
    data?: {};
    requestSubmit?: () => void;
    parent?: any;
    documentCls?: any;
    pack?: any;
    renderSheet?: boolean;
  };
  /** Events type alias for {@link TjsDocumentCreateComp | associated component}. */
  export type Events = { [evt: string]: CustomEvent<any> };
  /** Slots type alias for {@link TjsDocumentCreateComp | associated component}. */
  export type Slots = {};
}

declare class TjsDocumentDeleteComp extends SvelteComponent<
  TjsDocumentDeleteComp.Props,
  TjsDocumentDeleteComp.Events,
  TjsDocumentDeleteComp.Slots
> {
  /** Getter for {@link TjsDocumentDeleteComp.Props.deleteDocument | deleteDocument} prop. */
  get deleteDocument(): () => Promise<void>;

  /** Setter for {@link TjsDocumentDeleteComp.Props.document | document} prop. */
  set document(_: foundry.abstract.Document);

  /** Getter for {@link TjsDocumentDeleteComp.Props.document | document} prop. */
  get document(): foundry.abstract.Document;
  /**accessor*/
  set undefined(_: any);
  get undefined(): any;
}

/** Event / Prop / Slot type aliases for {@link TjsDocumentDeleteComp | associated component}. */
declare namespace TjsDocumentDeleteComp {
  /** Props type alias for {@link TjsDocumentDeleteComp | associated component}. */
  export type Props = {
    /** @type {foundry.abstract.Document} */
    document?: foundry.abstract.Document;
    /**
     * Handles the button click for 'Yes'.
     *
     * @returns {Promise<void>}
     */
    deleteDocument?: () => Promise<void>;
  };
  /** Events type alias for {@link TjsDocumentDeleteComp | associated component}. */
  export type Events = { [evt: string]: CustomEvent<any> };
  /** Slots type alias for {@link TjsDocumentDeleteComp | associated component}. */
  export type Slots = {};
}

declare class TjsDocumentImportComp extends SvelteComponent<
  TjsDocumentImportComp.Props,
  TjsDocumentImportComp.Events,
  TjsDocumentImportComp.Slots
> {
  /** Getter for {@link TjsDocumentImportComp.Props.requestSubmit | requestSubmit} prop. */
  get requestSubmit(): () => void;

  /** Setter for {@link TjsDocumentImportComp.Props.document | document} prop. */
  set document(_: foundry.abstract.Document);

  /** Getter for {@link TjsDocumentImportComp.Props.document | document} prop. */
  get document(): foundry.abstract.Document;
  /**accessor*/
  set undefined(_: any);
  get undefined(): any;
}

/** Event / Prop / Slot type aliases for {@link TjsDocumentImportComp | associated component}. */
declare namespace TjsDocumentImportComp {
  /** Props type alias for {@link TjsDocumentImportComp | associated component}. */
  export type Props = {
    requestSubmit?: () => void;
    /** @type {foundry.abstract.Document} */
    document?: foundry.abstract.Document;
  };
  /** Events type alias for {@link TjsDocumentImportComp | associated component}. */
  export type Events = { [evt: string]: CustomEvent<any> };
  /** Slots type alias for {@link TjsDocumentImportComp | associated component}. */
  export type Slots = {};
}

declare class TjsDocumentOwnershipComp extends SvelteComponent<
  TjsDocumentOwnershipComp.Props,
  TjsDocumentOwnershipComp.Events,
  TjsDocumentOwnershipComp.Slots
> {
  /** Getter for {@link TjsDocumentOwnershipComp.Props.requestSubmit | requestSubmit} prop. */
  get requestSubmit(): () => void;

  /** Setter for {@link TjsDocumentOwnershipComp.Props.document | document} prop. */
  set document(_: any);

  /** Getter for {@link TjsDocumentOwnershipComp.Props.document | document} prop. */
  get document(): any;
  /**accessor*/
  set undefined(_: any);
  get undefined(): any;
}

/** Event / Prop / Slot type aliases for {@link TjsDocumentOwnershipComp | associated component}. */
declare namespace TjsDocumentOwnershipComp {
  /** Props type alias for {@link TjsDocumentOwnershipComp | associated component}. */
  export type Props = { requestSubmit?: () => void; document?: any };
  /** Events type alias for {@link TjsDocumentOwnershipComp | associated component}. */
  export type Events = { [evt: string]: CustomEvent<any> };
  /** Slots type alias for {@link TjsDocumentOwnershipComp | associated component}. */
  export type Slots = {};
}

declare class TjsFolderCreateUpdateComp extends SvelteComponent<
  TjsFolderCreateUpdateComp.Props,
  TjsFolderCreateUpdateComp.Events,
  TjsFolderCreateUpdateComp.Slots
> {
  /** Getter for {@link TjsFolderCreateUpdateComp.Props.requestSubmit | requestSubmit} prop. */
  get requestSubmit(): () => void;

  /** Setter for {@link TjsFolderCreateUpdateComp.Props.document | document} prop. */
  set document(_: any);

  /** Getter for {@link TjsFolderCreateUpdateComp.Props.document | document} prop. */
  get document(): any;
  /**accessor*/
  set undefined(_: any);
  get undefined(): any;
}

/** Event / Prop / Slot type aliases for {@link TjsFolderCreateUpdateComp | associated component}. */
declare namespace TjsFolderCreateUpdateComp {
  /** Props type alias for {@link TjsFolderCreateUpdateComp | associated component}. */
  export type Props = { requestSubmit?: () => void; document?: any };
  /** Events type alias for {@link TjsFolderCreateUpdateComp | associated component}. */
  export type Events = { [evt: string]: CustomEvent<any> };
  /** Slots type alias for {@link TjsFolderCreateUpdateComp | associated component}. */
  export type Slots = {};
}

declare class TjsFolderDeleteComp extends SvelteComponent<
  TjsFolderDeleteComp.Props,
  TjsFolderDeleteComp.Events,
  TjsFolderDeleteComp.Slots
> {
  /** Getter for {@link TjsFolderDeleteComp.Props.deleteFolder | deleteFolder} prop. */
  get deleteFolder(): () => Promise<fvtt.Folder>;

  /** Setter for {@link TjsFolderDeleteComp.Props.document | document} prop. */
  set document(_: any);

  /** Getter for {@link TjsFolderDeleteComp.Props.document | document} prop. */
  get document(): any;
  /**accessor*/
  set undefined(_: any);
  get undefined(): any;
}

/** Event / Prop / Slot type aliases for {@link TjsFolderDeleteComp | associated component}. */
declare namespace TjsFolderDeleteComp {
  /** Props type alias for {@link TjsFolderDeleteComp | associated component}. */
  export type Props = {
    document?: any;
    /**
     * Removes a folder with deleting documents.
     *
     * @returns {Promise<fvtt.Folder>}
     */
    deleteFolder?: () => Promise<fvtt.Folder>;
  };
  /** Events type alias for {@link TjsFolderDeleteComp | associated component}. */
  export type Events = { [evt: string]: CustomEvent<any> };
  /** Slots type alias for {@link TjsFolderDeleteComp | associated component}. */
  export type Slots = {};
}

declare class TjsFolderExportComp extends SvelteComponent<
  TjsFolderExportComp.Props,
  TjsFolderExportComp.Events,
  TjsFolderExportComp.Slots
> {
  /** Getter for {@link TjsFolderExportComp.Props.exportData | exportData} prop. */
  get exportData(): () => Promise<globalThis.CompendiumCollection | boolean>;

  /** Setter for {@link TjsFolderExportComp.Props.document | document} prop. */
  set document(_: any);

  /** Getter for {@link TjsFolderExportComp.Props.document | document} prop. */
  get document(): any;

  /** Setter for {@link TjsFolderExportComp.Props.packName | packName} prop. */
  set packName(_: any);

  /** Getter for {@link TjsFolderExportComp.Props.packName | packName} prop. */
  get packName(): any;

  /** Setter for {@link TjsFolderExportComp.Props.merge | merge} prop. */
  set merge(_: any);

  /** Getter for {@link TjsFolderExportComp.Props.merge | merge} prop. */
  get merge(): any;

  /** Setter for {@link TjsFolderExportComp.Props.keepId | keepId} prop. */
  set keepId(_: any);

  /** Getter for {@link TjsFolderExportComp.Props.keepId | keepId} prop. */
  get keepId(): any;
  /**accessor*/
  set undefined(_: any);
  get undefined(): any;
}

/** Event / Prop / Slot type aliases for {@link TjsFolderExportComp | associated component}. */
declare namespace TjsFolderExportComp {
  /** Props type alias for {@link TjsFolderExportComp | associated component}. */
  export type Props = {
    document?: any;
    packName?: any;
    merge?: any;
    keepId?: any;
    /**
     * Export folder documents to compendium.
     *
     * @returns {Promise<globalThis.CompendiumCollection | boolean>}
     */
    exportData?: () => Promise<any>;
  };
  /** Events type alias for {@link TjsFolderExportComp | associated component}. */
  export type Events = { [evt: string]: CustomEvent<any> };
  /** Slots type alias for {@link TjsFolderExportComp | associated component}. */
  export type Slots = {};
}

declare class TjsFolderRemoveComp extends SvelteComponent<
  TjsFolderRemoveComp.Props,
  TjsFolderRemoveComp.Events,
  TjsFolderRemoveComp.Slots
> {
  /** Getter for {@link TjsFolderRemoveComp.Props.removeFolder | removeFolder} prop. */
  get removeFolder(): () => Promise<fvtt.Folder>;

  /** Setter for {@link TjsFolderRemoveComp.Props.document | document} prop. */
  set document(_: any);

  /** Getter for {@link TjsFolderRemoveComp.Props.document | document} prop. */
  get document(): any;
  /**accessor*/
  set undefined(_: any);
  get undefined(): any;
}

/** Event / Prop / Slot type aliases for {@link TjsFolderRemoveComp | associated component}. */
declare namespace TjsFolderRemoveComp {
  /** Props type alias for {@link TjsFolderRemoveComp | associated component}. */
  export type Props = {
    document?: any;
    /**
     * Removes a folder without deleting documents.
     *
     * @returns {Promise<fvtt.Folder>}
     */
    removeFolder?: () => Promise<fvtt.Folder>;
  };
  /** Events type alias for {@link TjsFolderRemoveComp | associated component}. */
  export type Events = { [evt: string]: CustomEvent<any> };
  /** Slots type alias for {@link TjsFolderRemoveComp | associated component}. */
  export type Slots = {};
}

declare class TjsFolderRolltableComp extends SvelteComponent<
  TjsFolderRolltableComp.Props,
  TjsFolderRolltableComp.Events,
  TjsFolderRolltableComp.Slots
> {
  /** Getter for {@link TjsFolderRolltableComp.Props.createTable | createTable} prop. */
  get createTable(): () => Promise<RollTable>;

  /** Setter for {@link TjsFolderRolltableComp.Props.document | document} prop. */
  set document(_: any);

  /** Getter for {@link TjsFolderRolltableComp.Props.document | document} prop. */
  get document(): any;
  /**accessor*/
  set undefined(_: any);
  get undefined(): any;
}

/** Event / Prop / Slot type aliases for {@link TjsFolderRolltableComp | associated component}. */
declare namespace TjsFolderRolltableComp {
  /** Props type alias for {@link TjsFolderRolltableComp | associated component}. */
  export type Props = {
    document?: any;
    /**
     * Creates roll table from folder documents.
     *
     * @returns {Promise<RollTable>}
     */
    createTable?: () => Promise<RollTable>;
  };
  /** Events type alias for {@link TjsFolderRolltableComp | associated component}. */
  export type Events = { [evt: string]: CustomEvent<any> };
  /** Slots type alias for {@link TjsFolderRolltableComp | associated component}. */
  export type Slots = {};
}

declare class FvttSidebarPopout extends SvelteComponent<
  FvttSidebarPopout.Props,
  FvttSidebarPopout.Events,
  FvttSidebarPopout.Slots
> {
  /** Setter for {@link FvttSidebarPopout.Props.elementRoot | elementRoot} prop. */
  set elementRoot(_: any);

  /** Getter for {@link FvttSidebarPopout.Props.elementRoot | elementRoot} prop. */
  get elementRoot(): any;

  /** Setter for {@link FvttSidebarPopout.Props.component | component} prop. */
  set component(_: any);

  /** Getter for {@link FvttSidebarPopout.Props.component | component} prop. */
  get component(): any;

  /** Setter for {@link FvttSidebarPopout.Props.sidebarData | sidebarData} prop. */
  set sidebarData(_: any);

  /** Getter for {@link FvttSidebarPopout.Props.sidebarData | sidebarData} prop. */
  get sidebarData(): any;
}

/** Event / Prop / Slot type aliases for {@link FvttSidebarPopout | associated component}. */
declare namespace FvttSidebarPopout {
  /** Props type alias for {@link FvttSidebarPopout | associated component}. */
  export type Props = {
    /**
     * Application Shell contract.
     */
    elementRoot?: any;
    /**
     * Bound sidebar tab component making it externally accessible.
     */
    component?: any;
    /**
     * Sidebar configuration data.
     */
    sidebarData?: any;
  };
  /** Events type alias for {@link FvttSidebarPopout | associated component}. */
  export type Events = { [evt: string]: CustomEvent<any> };
  /** Slots type alias for {@link FvttSidebarPopout | associated component}. */
  export type Slots = {};
}

declare class FvttSidebarTab extends SvelteComponent<
  FvttSidebarTab.Props,
  FvttSidebarTab.Events,
  FvttSidebarTab.Slots
> {
  /** Setter for {@link FvttSidebarTab.Props.anchorEl | anchorEl} prop. */
  set anchorEl(_: HTMLAnchorElement);

  /** Getter for {@link FvttSidebarTab.Props.anchorEl | anchorEl} prop. */
  get anchorEl(): HTMLAnchorElement;

  /** Setter for {@link FvttSidebarTab.Props.component | component} prop. */
  set component(_: any);

  /** Getter for {@link FvttSidebarTab.Props.component | component} prop. */
  get component(): any;

  /** Setter for {@link FvttSidebarTab.Props.sidebarData | sidebarData} prop. */
  set sidebarData(_: any);

  /** Getter for {@link FvttSidebarTab.Props.sidebarData | sidebarData} prop. */
  get sidebarData(): any;
}

/** Event / Prop / Slot type aliases for {@link FvttSidebarTab | associated component}. */
declare namespace FvttSidebarTab {
  /** Props type alias for {@link FvttSidebarTab | associated component}. */
  export type Props = {
    /**
     * Export the main anchor element so that FVTTSidebarControl can adjust the sidebar width.
     *
     * @type {HTMLAnchorElement}
     */
    anchorEl: HTMLAnchorElement;
    /**
     * Bound sidebar tab component making it accessible from {@link TJSSidebarEntry}.
     */
    component?: any;
    /**
     * Sidebar configuration data.
     */
    sidebarData?: any;
  };
  /** Events type alias for {@link FvttSidebarTab | associated component}. */
  export type Events = { [evt: string]: CustomEvent<any> };
  /** Slots type alias for {@link FvttSidebarTab | associated component}. */
  export type Slots = {};
}

declare class FvttSidebarWrapper extends SvelteComponent<
  FvttSidebarWrapper.Props,
  FvttSidebarWrapper.Events,
  FvttSidebarWrapper.Slots
> {
  /** Setter for {@link FvttSidebarWrapper.Props.component | component} prop. */
  set component(_: any);

  /** Getter for {@link FvttSidebarWrapper.Props.component | component} prop. */
  get component(): any;

  /** Setter for {@link FvttSidebarWrapper.Props.sidebarData | sidebarData} prop. */
  set sidebarData(_: any);

  /** Getter for {@link FvttSidebarWrapper.Props.sidebarData | sidebarData} prop. */
  get sidebarData(): any;
}

/** Event / Prop / Slot type aliases for {@link FvttSidebarWrapper | associated component}. */
declare namespace FvttSidebarWrapper {
  /** Props type alias for {@link FvttSidebarWrapper | associated component}. */
  export type Props = {
    /**
     * Bound mounted sidebar component making it accessible from {@link TJSSidebarEntry}.
     */
    component?: any;
    /**
     * Sidebar configuration data.
     */
    sidebarData?: any;
  };
  /** Events type alias for {@link FvttSidebarWrapper | associated component}. */
  export type Events = { [evt: string]: CustomEvent<any> };
  /** Slots type alias for {@link FvttSidebarWrapper | associated component}. */
  export type Slots = {};
}

export {
  FvttSidebarPopout as FVTTSidebarPopout,
  FvttSidebarTab as FVTTSidebarTab,
  FvttSidebarWrapper as FVTTSidebarWrapper,
  TjsDocumentCreateComp as TJSDocumentCreateComp,
  TjsDocumentDeleteComp as TJSDocumentDeleteComp,
  TjsDocumentImportComp as TJSDocumentImportComp,
  TjsDocumentOwnershipComp as TJSDocumentOwnershipComp,
  TjsFolderCreateUpdateComp as TJSFolderCreateUpdateComp,
  TjsFolderDeleteComp as TJSFolderDeleteComp,
  TjsFolderExportComp as TJSFolderExportComp,
  TjsFolderRemoveComp as TJSFolderRemoveComp,
  TjsFolderRolltableComp as TJSFolderRolltableComp,
};
